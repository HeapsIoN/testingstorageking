//%attributes = {"lang":"en"} comment added and reserved by 4D.
//  //SHOW ON DISK(Get 4D folder+"4D Preferences v13.4DPreferences")
//SDD 30/9/11 Changes to include Billing KeyStatsCategories
//SDD 13/08/13 Modified at line 165 to avoid divide by zero error
C_REAL($0)//Amount in advance  CalcRentAdvanceOld
C_DATE($1)//Date to calculate as at
C_BOOLEAN($2;$3;$4;$RentAdvMethod;$NoErrors;$RentOnly)//True is Daily Basis
C_BOOLEAN($5;$Set)//Create sets
C_LONGINT($i)
$0:=0
$RentAdvMethod:=$2
$NoErrors:=$3
$RentOnly:=True
$Set:=False
If (Count parameters>3)
$RentOnly:=$4
If (Count parameters>4)
$Set:=$5
End if 
End if 
vAmt1:=0
vAmt2:=0
vAmt3:=0
vAmt4:=0
QUERY([Unit];[Unit]AgreeNo=[Agreement]RAgreeNo)
GetAnalysis (False;True)
QUERY([Trxs];[Trxs]AgreeNo=[Agreement]RAgreeNo;*)
If (<>sFacility="ST@")
QUERY([Trxs]; & ;[Trxs]TrxDate>=!2016-06-01!;*)
End if 
QUERY([Trxs]; & ;[Trxs]DateFrom<=$1;*)
QUERY([Trxs]; & ;[Trxs]DateTo>$1)


Case of 
: (Records in selection([Trxs])>0)
If (Records in selection([Trxs])>1)
ORDER BY([Trxs];[Trxs]TotAmt;<)//Put the largest amt first
End if 
[Agreement]BalFwd:=Record number([Trxs])//Store rec location for use by report
For ($i;1;Records in selection([Trxs]))
RELATE ONE([Trxs]AnalysisCode)
If ((([Analysis]KeyStatsCategory=Get localized string("Rent")) | ([Analysis]KeyStatsCategory="Support") | ([Analysis]KeyStatsCategory=Get localized string("Discounts"))) & ([Facility]PrepaidAnalysisCat=False)) | ($RentOnly=False) | (([Analysis]AnalysisCategory=Get localized string("Rental Fees")) & ([Facility]PrepaidAnalysisCat=True))
$Amount:=0
$Tax:=0
If ($RentAdvMethod)
//Calculate using daily basis  
If ([Trxs]DateFrom#[Trxs]DateTo)
$MthsAdv:=Round([Trxs]DateTo-[Trxs]DateFrom;0)
Case of 
: ($MthsAdv>=28) & ($MthsAdv<=31)
$Amount:=Round([Trxs]TotAmt*([Trxs]DateTo-$1-1)/30.42;2)
: ($MthsAdv>=59) & ($MthsAdv<=62)
$Amount:=Round([Trxs]TotAmt*([Trxs]DateTo-$1-1)/60.8;2)
: ($MthsAdv>=89) & ($MthsAdv<=92)
$Amount:=Round([Trxs]TotAmt*([Trxs]DateTo-$1-1)/91.2;2)
: ($MthsAdv>=181) & ($MthsAdv<=183)
$Amount:=Round([Trxs]TotAmt*([Trxs]DateTo-$1-1)/182.4;2)
: ($MthsAdv>=365) & ($MthsAdv<=366)
$Amount:=Round([Trxs]TotAmt*([Trxs]DateTo-$1-1)/364.8;2)
Else 
$Amount:=Round([Trxs]TotAmt*([Trxs]DateTo-$1-1)/([Trxs]DateTo-[Trxs]DateFrom);2)
End case 
End if 
Else 
//Calculate using whole months basis    
$MthsAdv:=Round(([Trxs]DateTo-[Trxs]DateFrom)/30.42;0)
If ($MthsAdv>=1)
$Month:=Trunc(($1-[Trxs]DateFrom)/30.42;0)+1//THIS DOESN'T SEEM RIGHT 31days=2 30days=1?
If ($Month<0)
$Month:=0
End if 
$Amount:=Round([Trxs]TotAmt*($MthsAdv-$Month)/$MthsAdv;2)
$Tax:=Round([Trxs]TaxAmt*($MthsAdv-$Month)/$MthsAdv;2)
End if 
End if 
$0:=$0+$Amount
If ([Facility]PrepaidAnalysisCat=True)
$posArray:=0
$posArray:=Find in array(asAnalysisCode;[Trxs]AnalysisCode)
aOBal{$posArray}:=aOBal{$posArray}+$Amount
aTaxAmt{$posArray}:=aTaxAmt{$posArray}+$Tax
Else 
$posArray:=0
$posArray:=Find in array(asAnalysisCode;[Trxs]AnalysisCode)
aOBal{$posArray}:=aOBal{$posArray}+$Amount
aTaxAmt{$posArray}:=aTaxAmt{$posArray}+$Tax
End if 
End if 
NEXT RECORD([Trxs])
End for 

: ([Agreement]LastBillDate<=$1) & ([Agreement]NextBillDate>$1) & (([Agreement]MoveOut=!00-00-00!) | ([Agreement]MoveOut>$1))
[Agreement]BalFwd:=-1
If (([Agreement]NextBillDate-[Agreement]LastBillDate)=0)
SyncRecordLog (Get localized string("Possible creation of NAN's")+[Agreement]AgreeNo+" [Agreement]NextBillDate="+String([Agreement]NextBillDate)+" [Agreement]LastBillDate="+String([Agreement]LastBillDate))
End if 
If ($RentAdvMethod)
//Calculate using daily basis    
$0:=Round([Agreement]LastBillAmt*([Agreement]NextBillDate-$1-1)/([Agreement]NextBillDate-[Agreement]LastBillDate);2)
//Modification by SDD on 9/8/05 to avoid slightly changing denominators between 30 & 31 day months.
$MthsAdv:=Round([Agreement]NextBillDate-[Agreement]LastBillDate;0)
Case of 
: ($MthsAdv>=28) & ($MthsAdv<=31)
$0:=Round([Agreement]LastBillAmt*([Agreement]NextBillDate-$1-1)/30.42;2)
: ($MthsAdv>=59) & ($MthsAdv<=62)
$0:=Round([Agreement]LastBillAmt*([Agreement]NextBillDate-$1-1)/60.8;2)
: ($MthsAdv>=89) & ($MthsAdv<=92)
$0:=Round([Agreement]LastBillAmt*([Agreement]NextBillDate-$1-1)/91.2;2)
: ($MthsAdv>=181) & ($MthsAdv<=183)
$0:=Round([Agreement]LastBillAmt*([Agreement]NextBillDate-$1-1)/182.4;2)
: ($MthsAdv>=365) & ($MthsAdv<=366)
$0:=Round([Agreement]LastBillAmt*([Agreement]NextBillDate-$1-1)/364.8;2)
Else 
//Do nothing
End case 
Else 
//Calculate using whole months basis    
$MthsAdv:=Round(([Agreement]NextBillDate-[Agreement]LastBillDate)/30.42;0)
If ($MthsAdv>=1)//SDD 13/08/13 Added this line to prevent divide by zero error
$Month:=Trunc(($1-[Agreement]LastBillDate)/30.42;0)+1//THIS DOESN'T SEEM RIGHT 31days=2 30days=1?
If ($Month<0)
$Month:=0
End if 
$0:=Round([Agreement]LastBillAmt*($MthsAdv-$Month)/$MthsAdv;2)

If ([Facility]TaxAddtoAmt)
$TaxRate:=0
$TaxRate:=GetTaxRate ([Agreement]LastBillDate)
$Tax:=([Agreement]LastBillAmt*$TaxRate)/(100+$TaxRate)
Else 
$Tax:=CalcTaxAmt ([Agreement]LastBillAmt)
End if 

Else 
$0:=0
End if 
If ($0<0)
$0:=0
End if 
End if 
$posArray:=0
$posArray:=Find in array(asAnalysisCode;[Trxs]AnalysisCode)

If ($posArray>0)
aOBal{$posArray}:=aOBal{$posArray}+$0
aTaxAmt{$posArray}:=aTaxAmt{$posArray}+$Tax
End if 
vAmt1:=vAmt1+$0
: (([Agreement]LastBillDate>$1) & ([Agreement]NextBillDate>$1)) | (([Agreement]ActiveAgreemt=False) & ([Agreement]MoveOut>$1))
$0:=-2//Not billed for the period in question
Else 
$0:=-1//Not billed up to date or has moved out
End case 
If ($NoErrors) & (($0=-1) | ($0=-2))
$0:=0
End if 

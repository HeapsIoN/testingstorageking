//%attributes = {"lang":"en"} comment added and reserved by 4D.
//9/5/13 Fixed problem where 'L' flag in StructureArray was ignored for Deletes
//SDD 12/09/13 Allow option to not send all the fields for KSS in testing a new HOF
C_LONGINT($1)//Table number of calling trigger
C_TEXT($2;$Key)//Key fields e.g. 005001002 = Field5,Field1,Field2
C_TEXT($3;$BillP)//Optional
C_DATE($4;$TrxDate)//Optional
C_REAL($5;$TrxAmt)//Optional
C_TEXT($6;$Code)//Optional
C_TEXT($7;$FacilityCode)
C_TEXT($8;$AgreeNo)
C_LONGINT($i;$Offset;$CountFields)
C_TEXT($Desc)
C_TEXT($Value)
C_BOOLEAN($Alert;$Same)
C_TEXT($LogSubtable;$LogBlobHeader)
C_BLOB(LogBlob)

If (Trigger event#On Deleting Record Event)//Inside Trigger Log as this is called by all triggers
Case of 
: ($1=10)//Activity is called from within the trigger where order of execution is important
: ($1=13) | ($1=16) | ($1=18) | ($1=19) | ($1=29) | ($1=30) | ($1=31) | ($1=33)
: ($1>=21) & ($1<=27)
: ($1>=36) & ($1<=45)
: ($1>=48)
//Don't calculate MD5 Checksum
Else 
CheckSumRecord ($1)
End case 
End if 

//Generic procedure to write log file for each table
//Called by Triggers from all tables
If ($1#26)
QUERY([UserLogins];[UserLogins]Name=Current user)
End if 
//0=Record Everything, 1=Don't Log Activity, 2=Don't Create EventLog (for SyncUpdating), 3=Don't do either
//Record Status is negative means that it will write as an ADD event
//-1=Is used by LogEvent to send it to a text file instead of the EventLog table
//-2 Write event but don't log activity but what would be a MOD is instead an ADD (assumes record does not exist)
//-3 Write event but don't log activity but what would be a MOD is instead an AD+ (assumes record could exist and if it does it overwrites existing with new data)
If ([UserLogins]RecordStatus<2)
$Key:=$2
$BillP:=""
$TrxDate:=!00-00-00!
$TrxAmt:=0
Case of 
: (Count parameters>=3)
$BillP:=$3
$TrxDate:=$4
$TrxAmt:=$5
$Code:=$6
$FacilityCode:=$7
$AgreeNo:=$8
Else 
If ($1=6)
$BillP:="LOG"
End if 
End case 
$Alert:=False
$Array:=Get pointer("◊asFlags"+Table name($1))
$Value:=""
While ($Key>"")
$i:=Num(Substring($Key;1;3))
$Value:=$Value+GetFieldValue (Field($1;$i);(Trigger event#On Saving New Record Event))+","//Get the Old values
$Key:=Substring($Key;4)
End while 
$Value:=Substring($Value;1;Length($Value)-1)
$Desc:=""
$CountFields:=Get last field number($1)
If (False)//This to be activated for KSS HOF only for testing week Sept 2013 but leave in case we need it again - should be inactivated after 23/09/13
Case of //Counts as of v9.1.3 that KSS sites used in Sep2012    StructureArray   SetupArrays  
: ($1=1)
$CountFields:=343
: ($1=2)
$CountFields:=47
: ($1=3)
$CountFields:=76
: ($1=4)
$CountFields:=122
: ($1=5)
$CountFields:=124
: ($1=6)
$CountFields:=42
: ($1=7)
$CountFields:=39
: ($1=8)
$CountFields:=32
: ($1=9)
$CountFields:=43
: ($1=10)
$CountFields:=87
: ($1=11)
$CountFields:=21
: ($1=12)
$CountFields:=77
: ($1=13)
$CountFields:=10
: ($1=14)
$CountFields:=14
: ($1=15)
$CountFields:=19
: ($1=17)
$CountFields:=46
: ($1=20)
$CountFields:=9
: ($1=28)
$CountFields:=9
: ($1=32)
$CountFields:=8
: ($1=33)
$CountFields:=11
: ($1=35)
$CountFields:=15
: ($1=36)
$CountFields:=6
: ($1=46)
$CountFields:=17
: ($1=47)
$CountFields:=5
End case 
End if 
$LogSubtable:=""
$LogBlobHeader:=""
$Offset:=0
SET BLOB SIZE(LogBlob;0)

Case of 
: (Trigger event=On Saving New Record Event) | ([UserLogins]RecordStatus<0)
For ($i;1;$CountFields)
$p:=Field($1;$i)
If (Field name($p)="UserLogin")
If ($p->="")
$p->:=[UserLogins]Name
End if 
End if 
If (Substring($Array->{$i};1;1)="L")
If (Substring($Array->{$i};2;1)="A")
$Alert:=True
End if 
Case of 
: (Type($p->)=Is subtable)
//Not used invalid option
: (Type($p->)=Is picture) | (Type($p->)=Is BLOB)
If (($1#11) & ($1#12)) | (<>tSendWrite)//Don't trigger letters if SendTrigger is True and Letters or Contacts
$LogBlobHeader:=SyncSavePictBlob ($1;$p;$LogBlobHeader)
End if 
Else 
//Do Nothing
End case 
$Desc:=$Desc+String($i;"000")+Field name($p)+Char(19)+GetFieldValue ($p)+Char(20)
End if 
End for 
If ($LogBlobHeader>"")
$Offset:=0
INSERT IN BLOB(LogBlob;0;21)
$LogBlobHeader:=$LogBlobHeader+("0"*(21-Length($LogBlobHeader)))
TEXT TO BLOB($LogBlobHeader;LogBlob;Mac text without length;$Offset)
//CONVERT FROM TEXT($LogBlobHeader;"UTF-8";LogBlob)
End if 

LogEvent ($Desc;$Alert;"ADD";$1;$2;$Value;$BillP;$TrxDate;$TrxAmt;$LogSubtable;->LogBlob;$Code;$FacilityCode;$AgreeNo)
: (Trigger event=On Saving Existing Record Event)
$Write:=False
$TUExist:=False//TriggerUpdate field
//TRACE
For ($i;1;$CountFields)
If (Is field number valid($1;$i))
$p:=Field($1;$i)
If (Field name($p)="TriggerUpdate")
$TUExist:=True
$pTU:=$p
End if 
If (Substring($Array->{$i};1;1)="L")
If (Substring($Array->{$i};2;1)="A")
$Alert:=True//StructureArray
End if 
$Same:=False
Case of 
//: (Type($p->)=Is Text )  `Don't do Else statement below  Test in v11 whether this is needed
: (Type($p->)=Is subtable)
//Not used invalid option
: (Type($p->)=Is picture) | (Type($p->)=Is BLOB)
$LogBlobHeader:=SyncSavePictBlob ($1;$p;$LogBlobHeader)
Else 
If ($p->=Old($p->))
$Same:=True
Else 
$Write:=True
End if 
End case 
If ($Same=False)
$Desc:=$Desc+String($i;"000")+Field name($p)+Char(18)+GetFieldValue ($p;True)+Char(19)+GetFieldValue ($p)+Char(20)
End if 
End if 
End if 
End for 
If ($LogBlobHeader>"")
$Offset:=0
INSERT IN BLOB(LogBlob;0;21)
$LogBlobHeader:=$LogBlobHeader+("0"*(21-Length($LogBlobHeader)))
TEXT TO BLOB($LogBlobHeader;LogBlob;Mac text without length;$Offset)
//CONVERT FROM TEXT($LogBlobHeader;"UTF-8";LogBlob)
End if 
If ($TUExist=True)
If ($pTU->=True)//Only log if TriggerUpdate=true
$pTU->:=False
$Write:=True
End if 
End if 
If ($Write) | ($1=9) | ($1=28) | ($1=29)//Always update Notices in case it is the letter  Prev also had 3=Unit
LogEvent ($Desc;$Alert;"MOD";$1;$2;$Value;$BillP;$TrxDate;$TrxAmt;$LogSubtable;->LogBlob;$Code;$FacilityCode;$AgreeNo)
End if 
If ($1=6)
If (<>sProduct="M@") & ($Desc="@DateBanked@") & (Substring([Trxs]AgreeNo;1;5)#Substring([Trxs]AnalysisCode;1;5))//Conditions inside loop incase other tables modified and sProduct not set
LogEvent ($Desc;$Alert;"MDB";$1;$2;$Value;$BillP;$TrxDate;$TrxAmt;$LogSubtable;->LogBlob;$Code;$FacilityCode;$AgreeNo)
End if 
End if 

: (Trigger event=On Deleting Record Event)
$Desc:=""
For ($i;1;$CountFields)
$p:=Field($1;$i)
If (Substring($Array->{$i};1;1)="L") & (Type($p->)#Is text)
Case of 
: (Type($p->)=Is subtable)
$Desc:=$Desc+String($i;"000")+Field name($p)+Char(19)+GetFieldValue ($p)+Char(20)
//Not used invalid option
: (Type($p->)=Is picture) & (Type($p->)=Is BLOB)//Do nothing
: (Type($p->)=Is text)//This should be changed as well for v11
$Desc:=$Desc+String($i;"000")+Field name($p)+Char(19)+GetFieldValue ($p)+Char(20)//Get the current value since Old does not work for Text
Else 
$Desc:=$Desc+String($i;"000")+Field name($p)+Char(19)+GetFieldValue ($p;True)+Char(20)//Get all the old values
End case 
End if 
End for 
LogEvent ($Desc;True;"DEL";$1;$2;$Value;$BillP;$TrxDate;$TrxAmt;$LogSubtable;->LogBlob;$Code;$FacilityCode;$AgreeNo)
If ($1=6)
If (<>sProduct="M@") & (Substring([Trxs]AgreeNo;1;5)#Substring([Trxs]AnalysisCode;1;5))
LogEvent ($Desc;True;"DDB";$1;$2;$Value;$BillP;$TrxDate;$TrxAmt;$LogSubtable;->LogBlob;$Code;$FacilityCode;$AgreeNo)
End if 
End if 
Else 
//Do nothing
End case 
SET BLOB SIZE(LogBlob;0)
End if 
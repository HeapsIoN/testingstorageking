//%attributes = {"lang":"en"} comment added and reserved by 4D.

// ----------------------------------------------------
// User name (OS): robert.richardson
// Date and time: 18/10/10, 09:54:50
// ----------------------------------------------------
// Method: EmailStatement
// Description
// Allows for emailing of a statement with a selected notice
//
// Parameters
// ----------------------------------------------------

C_POINTER($p)
C_BOOLEAN($Shift)
C_TEXT(Test_TextBlob;vOpenBalText;vCloseBalText)
C_BOOLEAN(forCompleted)
forCompleted:=False
vReprintCopy:=False
vtInvAgree:=""
//$CustCode:=[Customer]CustomerCode
$Resv:=False
If (Count parameters=1)
$Resv:=$1
End if 
$Shift:=False
If (Shift down)
$Shift:=True
End if 

If ($Resv)
ResLetterRef 
Else 
GenerateRentIncreaseFields 
BillPlanReference 
End if 

QUERY([Notices];[Notices]FacilityCode=<>sFacility;*)
QUERY([Notices]; & ;[Notices]RuleNotice=False;*)
If ($Resv)
QUERY([Notices]; & ;[Notices]NoticePlanNo=0;*)
Else 
QUERY([Notices]; & ;[Notices]NoticePlanNo=[Agreement]NoticePlanNo;*)//Added 4.1.0
End if 
//QUERY([Notices]; & ;[Notices]RefDateField>10;*)  `Added 4.1.0 to avoid getting movein or moveout letters
//QUERY([Notices]; & ;[Notices]DaysAfter<0;*)
QUERY([Notices]; & ;[Notices]EmailSubject>"  ";*)
QUERY([Notices]; & ;[Notices]HideNotice=False;*)
QUERY([Notices]; & ;[Notices]EmailBlank=False)
$Print:=True
If (Records in selection([Notices])>1)
ORDER BY([Notices];[Notices]RefDateField;>;[Notices]DaysAfter;>)//NextBillDate to come first
$Print:=False
ORDER BY([Notices];[Notices]Description;>)
ARRAY TEXT(asNoticeDesc;0)
SELECTION TO ARRAY([Notices]Description;asNoticeDesc)
vTitle:=Get localized string("Select Email")
Open window((Screen width/2)-199;(Screen height/2)-180;(Screen width/2)+199;(Screen height/2)+180;5;Get localized string("Select Email"))
DIALOG([Notices];"SelectNotice")
CLOSE WINDOW
If (OK=1)
If (asNoticeDesc>=1)
QUERY SELECTION([Notices];[Notices]Description=asNoticeDesc{asNoticeDesc})
$Print:=True
End if 
End if 
End if 
Case of 
: (Records in selection([Notices])=0)
AlertMessage (Get localized string("There are no email notices set up for reminders. Please select Notice Plans from the Maintenance menu, locate your reminder notice and ensure you configure the email options for this notice."))
: ([Customer]EmailAddress="") | (Position(Char(64);[Customer]EmailAddress)=0)
AlertMessage (Get localized string("The customer's email address is not valid. Ensure your customer's email address contains an @ sign, and only letters, numbers, hyphens or underscores. Other symbols are not supported."))
: ([Notices]EmailBlank)
AlertMessage (Get localized string("The email reminder notice is missing an email subject. Please select Notice Plans from the Maintenance menu, locate your reminder notice and add an email subject for the notice."))
Else 
If ($Print=True)
CREATE RECORD([Letters])
If ($Resv)
[Letters]AgreeNo:=[Reservation]RReserveNo
Else 
[Letters]AgreeNo:=[Agreement]RAgreeNo
End if 
[Letters]LetterDesc:=[Notices]Description
[Letters]DateSent:=Current date
$p:=->[Notices]Email
[Letters]SentViaEmail:=True
[Letters]Custom1:=[Notices]EmailSubject
[Letters]SentwithInv:=True
BLOB PROPERTIES($p->;$Compressed)
If ($Compressed#Is not compressed)
EXPAND BLOB($p->)
End if 
$emailText:=Convert to text($p->;"UTF-8")
$emailText:=ProcessStormanHTMLTags ($emailText)
CONVERT FROM TEXT($emailText;"UTF-8";[Letters]LetterBLOB)
[Letters]Custom1:=ProcessStormanHTMLTags ([Letters]Custom1)
//[Letters]LetterBLOB:=FreezeLetter ($p;True)
COMPRESS BLOB([Letters]LetterBLOB)
SAVE RECORD([Letters])
If ($Resv)
QUERY([Letters];[Letters]AgreeNo=[Reservation]RReserveNo)
Else 
QUERY([Letters];[Letters]AgreeNo=[Agreement]RAgreeNo)
End if 
ORDER BY([Letters];[Letters]DateSent;<)
CREATE RECORD([Message])
[Message]Subject:=[Notices]EmailSubject
[Message]Subject:=ProcessStormanHTMLTags ([Message]Subject)
[Message]Address:=[Customer]EmailAddress
[Message]OutIn:=True
[Message]MsgDate:=Current date
[Message]MsgTime:=Current time
[Message]Facility:=Substring([Customer]CustomerCode;1;5)
BLOB PROPERTIES([Letters]LetterBLOB;$Compressed)
If ($Compressed#Is not compressed)
EXPAND BLOB([Letters]LetterBLOB)
End if 
[Message]EmailMsg:=[Letters]LetterBLOB
COMPRESS BLOB([Letters]LetterBLOB)
//$Document:=<>sTutPath+"Email"+[Letters]AgreeNo
//If ((Test path name($Document)=Is a document))
//$vhDocRef:=Open document($Document)  // Select the document of your choice
//CLOSE DOCUMENT($vhDocRef)
//DOCUMENT TO BLOB(Document;$Blob74)
//$Blobtext74:=BLOB to text($Blob74;Mac text without length)
//$Blobtext74:=Replace string($Blobtext74;"./images/";<>sTutPath+"images\\")
//$Blobtext74:=Replace string($Blobtext74;"<p>";"<br>")
//$Blobtext74:=Replace string($Blobtext74;"</p>";"<br>")
//TEXT TO BLOB($Blobtext74;[Message]EmailMsg;Mac text without length)
//DELETE DOCUMENT($Document)
//Else 
//[Message]MsgBody:=vLeg
//End if 
If ([Facility]UsePDFWriter) | (<>iPlatform=2)
If ([Facility]InvUseAgrBalFwd=True)
If ($Resv)
[Message]Attachments:=<>sPDFDocsPath+"Statement"+[Reservation]RReserveNo+".pdf"
Else 
[Message]Attachments:=<>sPDFDocsPath+"Statement"+[Agreement]RAgreeNo+".pdf"
End if 
Else 
If ($Resv)
[Message]Attachments:=<>sPDFDocsPath+"Statement"+[Reservation]CustomerCode+".pdf"
Else 
[Message]Attachments:=<>sPDFDocsPath+"Statement"+[Agreement]CustomerCode+".pdf"
End if 
End if 
<>tPrintPDF:=True
vPDFName:=[Facility]PDFName
$Name:=SelectPDFDoc (1)
If ($Name="Failed")
ABORT
End if 
SelectPDFDoc (2;[Message]Attachments)
SET PRINT PREVIEW(False)
If ($Shift=True)
SAVE RECORD([Customer])
CREATE SET([Customer];"CustRestore")
If ($Resv)
SAVE RECORD([Reservation])
CREATE SET([Reservation];"ResRestore")
Else 
SAVE RECORD([Agreement])
CREATE SET([Agreement];"AgreeRestore")
End if 
CREATE SET([Trxs];"ToRestore")
FORM SET OUTPUT([Trxs];"InquiryPrint")
PrintSelection ("P*";->[Trxs])
FORM SET OUTPUT([Trxs];"TransOut")
Else 
SAVE RECORD([Customer])
CREATE SET([Customer];"CustRestore")
If ($Resv)
SAVE RECORD([Reservation])
CREATE SET([Reservation];"ResRestore")
Else 
SAVE RECORD([Agreement])
CREATE SET([Agreement];"AgreeRestore")
End if 
CREATE SET([Trxs];"ToRestore")

If ([Facility]InvStatement=2)
READ WRITE([Trxs])
QUERY([Trxs];[Trxs]AgreeNo=[Agreement]RAgreeNo;*)
QUERY([Trxs]; & ;[Trxs]Charge=True;*)
QUERY([Trxs]; & ;[Trxs]InvNo=0)
DISTINCT VALUES([Trxs]TrxDate;$TrxDate)
CREATE SET([Trxs];"SearchInvNo")
For ($inv;1;Size of array($TrxDate))
$InvContinue:=False
If ([Facility]CentralAddress="") | (<>sProduct="M@")
If (Not(Semaphore("<>bNextInvNo";1800)))
$InvContinue:=True
End if 
End if 
If ($InvContinue)
//10285


If (Application type=4D Remote mode)
GET PROCESS VARIABLE(-1;<>aiNextInvNo;<>aiNextInvNo)
GET PROCESS VARIABLE(-1;<>asAllSiteCodes;<>asAllSiteCodes)
End if 
$arraypos:=Find in array(<>asAllSiteCodes;[Facility]FacilityCode)

<>aiNextInvNo{$arraypos}:=<>aiNextInvNo{$arraypos}-1
Repeat 
<>aiNextInvNo{$arraypos}:=<>aiNextInvNo{$arraypos}+1
QUERY([Trxs];[Trxs]AgreeNo=[Facility]FacilityCode+"@";*)
QUERY([Trxs]; & ;[Trxs]InvNo>=<>aiNextInvNo{$arraypos})
Until (Records in selection([Trxs])<1)
USE SET("SearchInvNo")
QUERY SELECTION([Trxs];[Trxs]TrxDate=$TrxDate{$inv})
APPLY TO SELECTION([Trxs];[Trxs]InvDate:=Current date)
APPLY TO SELECTION([Trxs];[Trxs]InvNo:=<>aiNextInvNo{$arraypos})
APPLY TO SELECTION([Trxs];[Trxs]SetMatch:=False)
[Facility]NextInvNo:=<>aiNextInvNo{$arraypos}+1
<>aiNextInvNo{$arraypos}:=[Facility]NextInvNo
If (Application type=4D Remote mode)
VARIABLE TO VARIABLE(-1;<>aiNextInvNo;<>aiNextInvNo)
End if 
CLEAR SEMAPHORE("<>bNextInvNo")
Else 
$InvNo:=InvoiceNumber 
USE SET("SearchInvNo")
QUERY SELECTION([Trxs];[Trxs]TrxDate=$TrxDate{$inv})
APPLY TO SELECTION([Trxs];[Trxs]InvDate:=Current date)
APPLY TO SELECTION([Trxs];[Trxs]InvNo:=$InvNo)
APPLY TO SELECTION([Trxs];[Trxs]SetMatch:=False)
End if 
End for 
CLEAR SET("SearchInvNo")
READ ONLY([Trxs])
UNLOAD RECORD([Trxs])
End if 

If ([Facility]InvUseAgrBalFwd=True)
If ([Reservation]RReserveNo>"")
QUERY([Trxs];[Trxs]AgreeNo=[Reservation]RReserveNo)
Else 
QUERY([Trxs];[Trxs]AgreeNo=[Agreement]RAgreeNo)
End if 
Else 
If ([Reservation]RReserveNo>"")
QUERY([Trxs];[Trxs]CustomerCode=[Reservation]CustomerCode)
Else 
QUERY([Trxs];[Trxs]CustomerCode=[Agreement]CustomerCode)
End if 
End if 
CREATE SET([Trxs];"Temp")
FIRST RECORD([Trxs])

If ([Reservation]RReserveNo>"")
$Date1:=[Reservation]ReservedDate
Else 
If ([Agreement]PriorLastBill#!00-00-00!)
$Date1:=[Agreement]PriorLastBill
Else 
$Date1:=[Agreement]LastBillDate
End if 
End if 

If ([Facility]StatementLastZeroBal=True)
If ([Facility]InvUseAgrBalFwd=True)
If ([Reservation]RReserveNo>"")
$Date3:=CalculateLastZeroBalance (2)
Else 
$Date3:=CalculateLastZeroBalance (1)
End if 
Else 
$Date3:=CalculateLastZeroBalance (0)
End if 
Else 
$Date3:=$Date1
End if 


If ($Date3<$Date1)
$Date1:=$Date3
End if 

If ($Date1>Current date)
$Date1:=Current date
End if 

$Date1:=RequestDate (Get localized string("Transaction Start Date:");$Date1)
If (OK=1)
LAST RECORD([Trxs])

If ($Date1>[Trxs]TrxDate)
$Date2:=$Date1
Else 
$Date2:=[Trxs]TrxDate
End if 

$Date2:=RequestDate (Get localized string("Transaction End Date:");$Date2)

If (OK=1)
vOpenBalText:=Get localized string("Opening balance as at")+" "+String($Date1)
vCloseBalText:=Get localized string("Closing balance as at")+" "+String($Date2)
If ([Facility]InvUseAgrBalFwd=True)
If ([Reservation]RReserveNo>"")
vOpenBal:=BalanceDateCalc (0;$Date1;True;[Reservation]RReserveNo)
vCloseBal:=BalanceDateCalc (0;$Date2;False;[Reservation]RReserveNo)
Else 
vOpenBal:=BalanceDateCalc (0;$Date1;True;[Agreement]RAgreeNo)
vCloseBal:=BalanceDateCalc (0;$Date2;False;[Agreement]RAgreeNo)
End if 
Else 
If ([Reservation]RReserveNo>"")
vOpenBal:=BalanceDateCalc (1;$Date1;True;[Reservation]CustomerCode)
vCloseBal:=BalanceDateCalc (1;$Date2;False;[Reservation]CustomerCode)
Else 
vOpenBal:=BalanceDateCalc (1;$Date1;True;[Agreement]CustomerCode)
vCloseBal:=BalanceDateCalc (1;$Date2;False;[Agreement]CustomerCode)
End if 
End if 
If ([Facility]InvStatement>0) & (Windows Ctrl down=False)
CREATE EMPTY SET([Trxs];"Statement")
QUERY SELECTION([Trxs];[Trxs]TrxDate>=$Date1;*)
QUERY SELECTION([Trxs]; & ;[Trxs]TrxDate<=$Date2;*)
QUERY SELECTION([Trxs]; & ;[Trxs]Charge=False)
For ($i;1;Records in selection([Trxs]))
ADD TO SET([Trxs];"Statement")
NEXT RECORD([Trxs])
End for 
USE SET("Temp")
QUERY SELECTION([Trxs];[Trxs]InvDate>=$Date1;*)
QUERY SELECTION([Trxs]; & ;[Trxs]InvDate<=$Date2;*)
QUERY SELECTION([Trxs]; & ;[Trxs]Charge=True)
For ($i;1;Records in selection([Trxs]))
ADD TO SET([Trxs];"Statement")
NEXT RECORD([Trxs])
End for 
USE SET("Statement")
ARRAY DATE(adTransactionDate;0)
ARRAY TEXT(asTransactionDescription;0)
ARRAY REAL(arTransactionCharge;0)
ARRAY REAL(arTransactionReceipt;0)
ARRAY LONGINT(aiTransactionInvNo;0)
DISTINCT VALUES([Trxs]InvNo;aiTransactionInvNo)
For ($i;1;Size of array(aiTransactionInvNo))
If (aiTransactionInvNo{$i}=0)
QUERY SELECTION([Trxs];[Trxs]InvNo=aiTransactionInvNo{$i})
For ($j;1;Records in selection([Trxs]))
INSERT IN ARRAY(adTransactionDate;Size of array(adTransactionDate)+1)
adTransactionDate{Size of array(adTransactionDate)}:=[Trxs]TrxDate
INSERT IN ARRAY(asTransactionDescription;Size of array(asTransactionDescription)+1)
asTransactionDescription{Size of array(asTransactionDescription)}:=[Trxs]Description
INSERT IN ARRAY(arTransactionCharge;Size of array(arTransactionCharge)+1)
arTransactionCharge{Size of array(arTransactionCharge)}:=0
INSERT IN ARRAY(arTransactionReceipt;Size of array(arTransactionReceipt)+1)
arTransactionReceipt{Size of array(arTransactionReceipt)}:=[Trxs]TotAmt
NEXT RECORD([Trxs])
End for 
Else 
QUERY SELECTION([Trxs];[Trxs]InvNo=aiTransactionInvNo{$i})
If ([Facility]StatementDetail)
For ($j;1;Records in selection([Trxs]))
INSERT IN ARRAY(adTransactionDate;Size of array(adTransactionDate)+1)
If ([Facility]InvStatement=2)
adTransactionDate{Size of array(adTransactionDate)}:=[Trxs]TrxDate
Else 
adTransactionDate{Size of array(adTransactionDate)}:=[Trxs]InvDate
End if 
INSERT IN ARRAY(asTransactionDescription;Size of array(asTransactionDescription)+1)
asTransactionDescription{Size of array(asTransactionDescription)}:="Invoice #"+String([Trxs]InvNo)+" "+[Trxs]Description
INSERT IN ARRAY(arTransactionCharge;Size of array(arTransactionCharge)+1)
arTransactionCharge{Size of array(arTransactionCharge)}:=[Trxs]TotAmt
INSERT IN ARRAY(arTransactionReceipt;Size of array(arTransactionReceipt)+1)
arTransactionReceipt{Size of array(arTransactionReceipt)}:=0
NEXT RECORD([Trxs])
End for 
Else 
INSERT IN ARRAY(adTransactionDate;Size of array(adTransactionDate)+1)
adTransactionDate{Size of array(adTransactionDate)}:=[Trxs]InvDate
INSERT IN ARRAY(asTransactionDescription;Size of array(asTransactionDescription)+1)
asTransactionDescription{Size of array(asTransactionDescription)}:="Invoice #"+String([Trxs]InvNo)
INSERT IN ARRAY(arTransactionCharge;Size of array(arTransactionCharge)+1)
arTransactionCharge{Size of array(arTransactionCharge)}:=Sum([Trxs]TotAmt)
INSERT IN ARRAY(arTransactionReceipt;Size of array(arTransactionReceipt)+1)
arTransactionReceipt{Size of array(arTransactionReceipt)}:=0
End if 
End if 
USE SET("Statement")
End for 
REDUCE SELECTION([Trxs];Size of array(adTransactionDate))
SORT ARRAY(adTransactionDate;asTransactionDescription;arTransactionCharge;arTransactionReceipt;>)
vi:=1
Case of 
: ([Facility]CustomInvFooter=True) & ([Facility]StandardInvFooter=False) & ([Facility]InvStatement=2)
FORM SET OUTPUT([Trxs];"InquiryPrintFooterTwo")
: ([Facility]InvStatement=2)
FORM SET OUTPUT([Trxs];"InquiryPrintTwo")
Else 
FORM SET OUTPUT([Trxs];"InquiryPrintNew")
End case 
CLEAR SET("Statement")
Else 
QUERY SELECTION([Trxs];[Trxs]TrxDate>=$Date1;*)
QUERY SELECTION([Trxs]; & ;[Trxs]TrxDate<=$Date2)
ORDER BY([Trxs];[Trxs]TrxDate;>;[Trxs]Charge;<;[Trxs]TotAmt;<)
FORM SET OUTPUT([Trxs];"InquiryPrint")
End if 
PrintSelection ("P";->[Trxs])
FORM SET OUTPUT([Trxs];"TransOut")
OBJECT SET ENABLED(bAbort;False)
If (In transaction)
SAVE RECORD([Agreement])
SAVE RECORD([Reservation])
SAVE RECORD([Customer])
VALIDATE TRANSACTION
START TRANSACTION
End if 
End if 
End if 
USE SET("Temp")
CLEAR SET("Temp")
End if 
SelectPDFDoc (3;$Name)
SelectPDFDoc (4;[Message]Attachments)
<>tPrintPDF:=False
$Document:=[Message]Attachments
If (Test path name($Document)=Is a document)
DOCUMENT TO BLOB($Document;[Message]AttachmentBlob)
COMPRESS BLOB([Message]AttachmentBlob)
If ($Resv)
If ([Facility]InvUseAgrBalFwd=True)
[Message]Attachments:="Statement"+[Reservation]RReserveNo+".pdf"
Else 
[Message]Attachments:="Statement"+[Reservation]CustomerCode+".pdf"
End if 
Else 
If ([Facility]InvUseAgrBalFwd=True)
[Message]Attachments:="Statement"+[Agreement]RAgreeNo+".pdf"
Else 
[Message]Attachments:="Statement"+[Agreement]CustomerCode+".pdf"
End if 
End if 
Else 
AlertMessage (Get localized string("The PDF document could not be created, and is not attached to this Email message!"))
End if 
Else 
AlertMessage (Get localized string("The PDF writer is not available, or not set up correctly. Please check your PDF settings via the Maintenance menu -> System Setup -> Merch Details tab. For PDF printer reinstallation advice, search our Online Support Knowledgebase for: #UTLPXRI01"))
End if 
SAVE RECORD([Message])
USE SET("ToRestore")
CLEAR SET("ToRestore")
USE SET("CustRestore")
CLEAR SET("CustRestore")
If ($Resv)
USE SET("ResRestore")
CLEAR SET("ResRestore")
Else 
USE SET("AgreeRestore")
CLEAR SET("AgreeRestore")
End if 
[Letters]Attachments:=<>sPDFDocsPath+[Message]Attachments//fb11178

ReCalc 
ConfirmTwo (Get localized string("Do you wish to edit this email message?");Get localized string("Yes");Get localized string("No"))
If (OK=1)
FORM SET INPUT([Message];"MessageEdit")
//Open HTML Email Editor
READ WRITE([Message])
Test_TextBlob:=Convert to text([Message]EmailMsg;"UTF-8")
Test_TheID:=Record number([Message])
Test_Mailpath:=""
$Window:=Open window((Screen width/2)-408;(Screen height/2)-338;(Screen width/2)+408;(Screen height/2)+338;4096;Get localized string("Email Message"))
MODIFY RECORD([Message];*)
[Letters]LetterDesc:=[Message]Subject
[Letters]LetterBLOB:=[Message]EmailMsg
COMPRESS BLOB([Letters]LetterBLOB)
COMPRESS BLOB([Message]EmailMsg)
///SAVE RECORD([Letters])
CLOSE WINDOW($Window)
UNLOAD RECORD([Message])
End if 

SAVE RECORD([Letters])//11178
QUERY([Message];[Message]OutIn=True;*)
QUERY([Message]; & ;[Message]SentRead=False;*)
QUERY([Message]; & ;[Message]Facility=<>sFacility)
If (Records in selection([Message])>0)
READ WRITE([Message])
CheckMail 
READ ONLY([Message])
UNLOAD RECORD([Message])
End if 
OBJECT SET VISIBLE(bAbort;False)
If (In transaction)
SAVE RECORD([Agreement])
SAVE RECORD([Reservation])
SAVE RECORD([Customer])
VALIDATE TRANSACTION
START TRANSACTION
End if 
End if 
ReCalc 
End case 
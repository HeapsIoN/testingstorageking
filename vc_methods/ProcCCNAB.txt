//%attributes = {"lang":"en"} comment added and reserved by 4D.
// ----------------------------------------------------
// User name (OS): nicholas.wykes
// Date and time: 28/04/10, 12:15:20
// ----------------------------------------------------
// Method: ProcCCThinc
// Description
// Thinc Credit Card Transaction method to create and upload transaction requests to the NAB server
//
// Parameters
// $1 - Merchant ID
// $2 - Merchant Password
// $3 - Timeout
// $4 - Amount
// $5 - Transaction Type
// $6 - Customer Code
// $7 - Transaction ID for Refunds/Void
// $8 - Credit Card Number
// $9 - Expiry Date
// $10 - Country
// $11 - Logging
// ----------------------------------------------------

C_TEXT($root;$subelem)
C_TEXT($0;$5;$9;$TransactionType)
C_REAL($4)
C_TEXT($Expiry;$Currency;$Timezone)
C_TEXT($10)
C_LONGINT($Amount;$Timeout;$GMTOffset;$3;$TCPID;$Error)
C_TEXT($1;$2;$6;$7;$8)
C_TEXT($Unique)
C_TEXT($Message;$Timestamp;$Header;$Zero;$ServerAddress;$PurchaseOrder;$Buffer)
C_LONGINT(viError)
C_TIME($GMTTime)
C_DATE($GMTDate)
C_LONGINT($Logging;$11)

viError:=0

If ($10="NZ")
$Currency:="NZD"
Else 
$Currency:="AUD"
End if 


$Logging:=$11

$GMT:=String(Current date;ISO date GMT)

$GMTTime:=Time(Substring($GMT;12;8))

$GMTDate:=Date(Substring($GMT;9;2)+"/"+Substring($GMT;6;2)+"/"+Substring($GMT;1;4))

Case of 
: ($GMTDate<Current date)
$GMTOffset:=$GMTTime-86400
: ($GMTDate>Current date)
$GMTOffset:=$GMTTime+86400
Else 
$GMTOffset:=$GMTTime+0
End case 

$GMTOffset:=$GMTOffset/60

//If (<>iPlatform=3)
//$Error:=sys_GetUTCOffset ($GMTOffset)
$GMTOffset:=$GMTOffset*-1//Change sign around
If ($GMTOffset>0)
$Timezone:="+"+String($GMTOffset)
Else 
$Timezone:=String($GMTOffset)
End if 
//Else 
//$Error:=Time_GetUTCoffset ($GMTOffset)
//$GMTOffset:=$GMTOffset/60  //Is returned in seconds rather than minutes
//If ($GMTOffset>0)
//$Timezone:="+"+String($GMTOffset)
//Else 
//$Timezone:=String($GMTOffset)
//End if 
//End if 

$Date:=String(Current date;8)
$Time:=String(Current time;6)
$Timestamp:=Substring($Date;1;4)+Substring($Date;9;2)+Substring($Date;6;2)+Substring($Time;12;2)+Substring($Time;15;2)+Substring($Time;18;2)+"000000"+$Timezone
$cr:=Char(13)+Char(10)
$TransactionResponse:=""

Case of 
: ($3=0)
$Timeout:=60
Else 
$Timeout:=$3
End case 

$Amount:=Num($4)*100

$Expiry:=Substring($9;1;2)+"/"+Substring($9;3;2)

Case of 
: ($5="P")
$TransactionType:="0"
: ($5="C") | ($5="V")
$TransactionType:="4"
End case 

$PurchaseOrder:=$6+"-"+Substring($Timestamp;1;8)

$Unique:=Substring(GetMD5 ($PurchaseOrder);1;30)

If ([Facility]TestAccount)
$ServerAddress:="demo.transact.nab.com.au"
Else 
$ServerAddress:="transact.nab.com.au"
End if 

$root:=DOM Create XML Ref("NABTransactMessage")

$subelem:=DOM Create XML element($root;"/NABTransactMessage/MessageInfo/messageID")//Unique identified for XML message String Max30
DOM SET XML ELEMENT VALUE($subelem;$Unique)

$subelem:=DOM Create XML element($root;"/NABTransactMessage/MessageInfo/messageTimestamp")//Time of the request String 24
DOM SET XML ELEMENT VALUE($subelem;$Timestamp)

$subelem:=DOM Create XML element($root;"/NABTransactMessage/MessageInfo/timeoutValue")//Timeout value Int Max999
DOM SET XML ELEMENT VALUE($subelem;String($Timeout))

$subelem:=DOM Create XML element($root;"/NABTransactMessage/MessageInfo/apiVersion")//Version of product  - Always "xml-4.2"
DOM SET XML ELEMENT VALUE($subelem;"xml-4.2")

$subelem:=DOM Create XML element($root;"/NABTransactMessage/MerchantInfo/merchantID")//Merchant ID String 7
DOM SET XML ELEMENT VALUE($subelem;$1)

$subelem:=DOM Create XML element($root;"/NABTransactMessage/MerchantInfo/password")//Merchant Password String
DOM SET XML ELEMENT VALUE($subelem;$2)

$subelem:=DOM Create XML element($root;"/NABTransactMessage/RequestType")//Request Type - "Payment" or "Echo"
DOM SET XML ELEMENT VALUE($subelem;"Payment")

$subelem:=DOM Create XML element($root;"/NABTransactMessage/Payment/TxnList";"count";"1")//Transaction list wrapper - currently only supports 1 transaction per request

$subelem:=DOM Create XML element($root;"/NABTransactMessage/Payment/TxnList/Txn";"ID";"1")//Transaction wrapper - ID always starts from 1

$subelem:=DOM Create XML element($root;"/NABTransactMessage/Payment/TxnList/Txn/txnType")// Transaction type Int
DOM SET XML ELEMENT VALUE($subelem;$TransactionType)

$subelem:=DOM Create XML element($root;"/NABTransactMessage/Payment/TxnList/Txn/txnSource")//Transaction Source - 23 = XML API
DOM SET XML ELEMENT VALUE($subelem;"23")

$subelem:=DOM Create XML element($root;"/NABTransactMessage/Payment/TxnList/Txn/amount")//Value of the transaction x 100 - ie $2.50 = 250
DOM SET XML ELEMENT VALUE($subelem;$Amount)

$subelem:=DOM Create XML element($root;"/NABTransactMessage/Payment/TxnList/Txn/currency")//Currency ie AUD
DOM SET XML ELEMENT VALUE($subelem;$Currency)

$subelem:=DOM Create XML element($root;"/NABTransactMessage/Payment/TxnList/Txn/purchaseOrderNo")//Unique Merchant transaction identifier perhaps CustomerCode-DateTime
DOM SET XML ELEMENT VALUE($subelem;$PurchaseOrder)

$subelem:=DOM Create XML element($root;"/NABTransactMessage/Payment/TxnList/Txn/txnID")//Transaction ID needed for refunds String 6-16
DOM SET XML ELEMENT VALUE($subelem;$7)

$subelem:=DOM Create XML element($root;"/NABTransactMessage/Payment/TxnList/Txn/CreditCardInfo/cardNumber")//Credit Card Number
DOM SET XML ELEMENT VALUE($subelem;$8)

$subelem:=DOM Create XML element($root;"/NABTransactMessage/Payment/TxnList/Txn/CreditCardInfo/expiryDate")//Credit Card Expiry Date format XX/XX
DOM SET XML ELEMENT VALUE($subelem;$Expiry)

DOM EXPORT TO VAR($root;$Message)
DOM CLOSE XML($root)

If ([Facility]TestAccount)
$Folder:="/test/xmlapi/payment"
Else 
$Folder:="/live/xmlapi/payment"
End if 


$Header:=$Header+"POST "+$Folder+" HTTP/1.1"+$cr
$Header:=$Header+"Host: "+$ServerAddress+$cr
$Header:=$Header+"Content-type: text/xml"+$cr
$Header:=$Header+"Content-length: "+String(Length($Message))+$cr


If ($Logging=1)
SyncRecordLog ($Header)
MaskCCLog ($Message;"NAB")
//SyncRecordLog ($Message)
End if 

$Error:=TCP_Open ($ServerAddress;443;$TCPID;2)

If ($Error=0)
$Error:=TCP_Send ($TCPID;$Header+$cr+$Message+$cr+$cr)
$Reply:=""
$WaitTime:=Current time+?00:00:15?//Timeout after 15 seconds

Repeat //While a HTTP response is being received
$Error:=TCP_Receive ($TCPID;$Buffer)
$resp:=OK
$Error:=TCP_State ($TCPID;$Status)
$Reply:=$Reply+$Buffer
If (Current time>$WaitTime)
$Error:=1//Timeout
End if 
Until ($Status=0) | ($Error>0) | (($Buffer="") & (Length($Reply)>10))
$Error:=TCP_Close ($TCPID)

If ($Logging=1)
SyncRecordLog ("TCP_Close Error "+String($Error))
SyncRecordLog ("Reply "+String($Reply))
End if 


Case of 
: ($Error>1)
$0:="ERRTCP"
AlertMessage (Get localized string("TCP Sending Error")+" # "+String($Error))
: ($Error=1)
$0:="ERR4TO"
AlertMessage (Get localized string("TCP Timeout Error"))
Else 
Repeat //While a complete HTTP request and response is being received
$HTTPResponse:=Substring($Reply;1;Position($cr+$cr;$Reply)-1)
If ($HTTPResponse="")
$HTTPResponse:="404"
End if 
If (Position("HTTP";$HTTPResponse)>0)
$HTTPResponseCode:=Substring($HTTPResponse;Position(" ";$HTTPResponse)+1;3)//This will be e.g. 100 (Continue), 200 (OK) etc
$Reply:=Substring($Reply;Position($cr+$cr;$Reply)+Length($cr+$cr))
Else //If not an HTTPResponse Header then must be the Verisign Payment Response message content
Case of 
: (Num($HTTPResponseCode)>=200) & (Num($HTTPResponseCode)<300)
$TransactionResponse:=$Reply
Else 
$TransactionResponse:=" "//To Break out of the Until loop
$Error:=Num($HTTPResponseCode)
End case 
End if 
Until ($TransactionResponse#"")
End case 

$oldErrMsg:=Method called on error

ON ERR CALL("ErrorNone")

$response:=DOM Parse XML variable($Reply)

If (viError#0) & (viError#54)
AlertMessage (WEB SERVICE Get info(Web Service detailed message))

If ($Logging=1)
SyncRecordLog ("viError= "+String(viError))
End if 
Else 

If ($Logging=1) & (viError=54)
SyncRecordLog ("viError= "+String(viError))
End if 
//Check whether store was successful
$resultRef:=DOM Find XML element($response;"NABTransactMessage/Status/statusCode")//Gateway Status
DOM GET XML ELEMENT VALUE($resultRef;$value)

If ($Logging=1)
SyncRecordLog ("Retriving value "+$value)
End if 

If ($value#"000") & ($value#"00") & ($value#"0") & ($value#"008") & ($value#"08") & ($value#"8")
$Zero:=$value
$resultRef:=DOM Find XML element($response;"NABTransactMessage/Status/statusDescription")
DOM GET XML ELEMENT VALUE($resultRef;$value)
AlertMessage (Get localized string("Failed - Error code")+" "+$Zero+$cr+$value)
vCCText:=$value
$0:="ERR"+$Zero
If ($Logging=1)
SyncRecordLog ("Error "+vCCText)
End if 
Else 
$resultRef:=DOM Find XML element($response;"NABTransactMessage/Payment/TxnList/Txn/responseCode")//Transaction Status 00 or 08 Approved
DOM GET XML ELEMENT VALUE($resultRef;$value)
If ($value#"00") & ($value#"08")
$Zero:=$value
$resultRef:=DOM Find XML element($response;"NABTransactMessage/Payment/TxnList/Txn/responseText")
DOM GET XML ELEMENT VALUE($resultRef;$value)
AlertMessage (Get localized string("Failed - Error code")+" "+$Zero+$cr+$value)
vCCText:=$value
$0:="ERR"+$Zero
If ($Logging=1)
SyncRecordLog ("Error "+vCCText)
End if 
Else 
$resultRef:=DOM Find XML element($response;"NABTransactMessage/Payment/TxnList/Txn/txnID")
DOM GET XML ELEMENT VALUE($resultRef;$value)
[Trxs]CCTransID:=$value
[Trxs]OriginalReceipt:=$PurchaseOrder
$0:=Substring($value;1;8)
If ($Logging=1)
SyncRecordLog ("TrxID "+$value)
SyncRecordLog ("Original Receipt "+$PurchaseOrder)
End if 
End if 
End if 

//Close off XML we used to read response
DOM CLOSE XML($response)
End if 

ON ERR CALL($oldErrMsg)

Else 
AlertMessage (Get localized string("The TCP connection could not be opened. Error")+" #"+String($Error))
$0:="ERR4IC"
End if 
//%attributes = {"lang":"en"} comment added and reserved by 4D.
READ WRITE([Trxs])
LOAD RECORD([Trxs])

//ConfirmTwo ("Fix dates or Matching?";"Fix Dates";"Matching")

//If (OK=1)

CREATE SET([Trxs];"BrokenDate")
DISTINCT VALUES([Trxs]Match;$aiMatch)
For ($i;1;Size of array($aiMatch))
USE SET("BrokenDate")
QUERY SELECTION([Trxs];[Trxs]Match=$aiMatch{$i};*)
QUERY SELECTION([Trxs]; & ;[Trxs]Charge=False)
$Receipt:=[Trxs]TotAmt
$Date:=[Trxs]TrxDate
USE SET("BrokenDate")
QUERY SELECTION([Trxs];[Trxs]Match=$aiMatch{$i};*)
QUERY SELECTION([Trxs]; & ;[Trxs]Charge=True)
If (Sum([Trxs]TotAmt)=$Receipt) & ($Date#!00-00-00!)
APPLY TO SELECTION([Trxs];[Trxs]TrxDate:=$Date)
APPLY TO SELECTION([Trxs];[Trxs]DateFrom:=$Date)
APPLY TO SELECTION([Trxs];[Trxs]DateTo:=$Date)
End if 
End for 
CLEAR SET("BrokenDate")

//Else 


//CREATE EMPTY SET([Trxs];"BrokenMatch")
//ALL RECORDS([Facility])

//For ($g;1;Records in selection([Facility]))

//QUERY([Trxs];[Trxs]CustomerCode=[Facility]FacilityCode+"MISCL")
//DISTINCT VALUES([Trxs]TrxDate;$aDate)  //get days of transactions


//For ($i;1;Size of array($aDate))
//QUERY([Trxs];[Trxs]TrxDate=$aDate{$i};*)
//QUERY([Trxs]; & ;[Trxs]CustomerCode=[Facility]FacilityCode+"MISCL";*)
//QUERY([Trxs]; & ;[Trxs]Charge=False)
//DISTINCT VALUES([Trxs]TrxTime;$aMISCReceipts)  //get receipts per day
//$Receipts:=0


//For ($t;1;Records in selection([Trxs]))  //add up totamt of receipts
//$Receipts:=$Receipts+[Trxs]TotAmt
//NEXT RECORD([Trxs])
//End for 


//For ($m;1;Size of array($aMISCReceipts))  //get charges per receipt
//QUERY([Trxs];[Trxs]TrxTime=$aMISCReceipts{$m};*)
//QUERY([Trxs]; & ;[Trxs]CustomerCode=[Facility]FacilityCode+"MISCL";*)
//QUERY([Trxs]; & ;[Trxs]Charge=False)
//$Match:=[Trxs]Match
//APPLY TO SELECTION([Trxs];[Trxs]Match:=$Match)

//QUERY([Trxs];[Trxs]TrxTime=$aMISCReceipts{$m};*)
//QUERY([Trxs]; & ;[Trxs]CustomerCode=[Facility]FacilityCode+"MISCL";*)
//QUERY([Trxs]; & ;[Trxs]Charge=True)
//$Charges:=0
//APPLY TO SELECTION([Trxs];[Trxs]Match:=$Match)


//For ($t;1;Records in selection([Trxs]))  //add up totamt of charges
//$Charges:=$Charges+[Trxs]TotAmt
//NEXT RECORD([Trxs])
//End for 

//$Site:=Find in array(<>asSiteCodes;[Facility]FacilityCode)

//If ($Charges#$Receipts)  //Balance NOT $0
//  //add to broken set
//QUERY([Trxs];[Trxs]TrxTime=$aMISCReceipts{$m};*)
//QUERY([Trxs]; & ;[Trxs]CustomerCode=[Facility]FacilityCode+"MISCL")


//For ($s;1;Records in selection([Trxs]))
//ADD TO SET([Trxs];"BrokenMatch")
//NEXT RECORD([Trxs])
//End for 

//End if 
//End for 
//End for 

//NEXT RECORD([Facility])
//End for 

//USE SET("BrokenMatch")
//CLEAR SET("BrokenMatch")

//End if 
READ ONLY([Trxs])
UNLOAD RECORD([Trxs])
//%attributes = {"publishedSoap":true,"publishedWsdl":true,"lang":"en"} comment added and reserved by 4D.
// 04/06/13 DAM Added WS_UnitTypeCodes/WS_ORUnitTypeNos - the last elemets of these arrays are used for 2 extra boxes and the price per facility doesn't include it
SOAP DECLARATION(WS_ORCustomerName;Is string var;SOAP input)
SOAP DECLARATION(WS_StreetAddress;Is string var;SOAP input)
SOAP DECLARATION(WS_StreetSuburb;Is string var;SOAP input)
SOAP DECLARATION(WS_PostCode;Is longint;SOAP input)
SOAP DECLARATION(WS_ORInsurance;Is Boolean;SOAP input)
SOAP DECLARATION(WS_InsAmount;Is real;SOAP input)
SOAP DECLARATION(WS_ORCustomerEmail;Is string var;SOAP input)
SOAP DECLARATION(WS_ORCustomerEmailSend;Is Boolean;SOAP input)
SOAP DECLARATION(WS_ORCustomerPhone;Is string var;SOAP input)
SOAP DECLARATION(WS_UnitTypeCodes;Text array;SOAP input)
SOAP DECLARATION(WS_ORUnitTypeNos;LongInt array;SOAP input)
SOAP DECLARATION(WS_ORDateUnitRequired;Is string var;SOAP input)
SOAP DECLARATION(WS_ORUnitRateSelected;Is string var;SOAP input)
SOAP DECLARATION(WS_LengthStay;Is longint;SOAP input)
//SOAP DECLARATION(WS_asAnalysis;Text array;SOAP Input)
//SOAP DECLARATION(WS_Username;Is String Var;SOAP Input)
//SOAP DECLARATION(WS_CustPass;Is String Var;SOAP Input)
//SOAP DECLARATION(WS_OREnquiryNo;Is String Var;SOAP Input)
SOAP DECLARATION(WS_WebServicePassword;Is text;SOAP input)

$String:="Start WS_BnSCreateRes"+Char(13)
$String:=$String+"WS_ORCustomerName: "+WS_ORCustomerName+Char(13)
$String:=$String+"WS_StreetAddress: "+WS_StreetAddress+Char(13)
$String:=$String+"WS_StreetSuburb: "+WS_StreetSuburb+Char(13)
$String:=$String+"WS_PostCode: "+String(WS_PostCode)+Char(13)
$String:=$String+"WS_ORInsurance: "+String(WS_ORInsurance)+Char(13)
$String:=$String+"WS_InsAmount: "+String(WS_InsAmount)+Char(13)
$String:=$String+"WS_ORCustomerEmail: "+WS_ORCustomerEmail+Char(13)
$String:=$String+"WS_ORCustomerEmailSend: "+String(WS_ORCustomerEmailSend)+Char(13)
$String:=$String+"WS_ORCustomerPhone: "+WS_ORCustomerPhone+Char(13)

$vlElem:=1
$sizeofarray:=Size of array(WS_UnitTypeCodes)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_UnitTypeCodes("+String($vlElem)+"):"+WS_UnitTypeCodes{$vlElem}+Char(13)
End for 

$vlElem:=1
$sizeofarray:=Size of array(WS_ORUnitTypeNos)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_ORUnitTypeNos("+String($vlElem)+"):"+String(WS_ORUnitTypeNos{$vlElem})+Char(13)
End for 

$String:=$String+"WS_ORDateUnitRequired: "+WS_ORDateUnitRequired+Char(13)
$String:=$String+"WS_ORUnitRateSelected: "+WS_ORUnitRateSelected+Char(13)
$String:=$String+"WS_LengthStay: "+String(WS_LengthStay)+Char(13)
C_TEXT($pass)
$pass:=WS_WebServicePassword
$pass:=Replace string($pass;Substring($pass;1;Length($pass)-2);"X"*(Length($pass)-2))
$String:=$String+"WS_WebServicePassword: "+$pass+Char(13)

WSRecordLog ($String)

SOAP DECLARATION(WS_ORSuccess;Is Boolean;SOAP output)
SOAP DECLARATION(WS_ORTotal;Is real;SOAP output)
SOAP DECLARATION(WS_Deposit;Is real;SOAP output)
SOAP DECLARATION(WS_ORErrorCode;Is integer;SOAP output)
SOAP DECLARATION(WS_ORErrorDescription;Is string var;SOAP output)
SOAP DECLARATION(WS_ReservationID;Is string var;SOAP output)
SOAP DECLARATION(WS_BoxID;Text array;SOAP output)
SOAP DECLARATION(WS_Code;Is text;SOAP output)
SOAP DECLARATION(WS_BoxType;Text array;SOAP output)

ALL RECORDS([Facility])
ORDER BY([Facility];[Facility]SortOrder;>)
<>sProduct:=[Facility]ProductCode
//ARRAY TEXT(<>asSiteCodes;Records in selection([Facility]))
//SELECTION TO ARRAY([Facility]FacilityCode;<>asSiteCodes)
ALL RECORDS([Facility])
ORDER BY([Facility];[Facility]SortOrder;>)

//$String:="Start WS_BnSCreateRes"+Char(13)
//$String:=$String+"WS_ORCustomerName: "+WS_ORCustomerName+Char(13)
//$String:=$String+"WS_StreetAddress: "+WS_StreetAddress+Char(13)
//$String:=$String+"WS_StreetSuburb: "+WS_StreetSuburb+Char(13)
//$String:=$String+"WS_PostCode: "+String(WS_PostCode)+Char(13)
//$String:=$String+"WS_ORInsurance: "+String(WS_ORInsurance)+Char(13)
//$String:=$String+"WS_InsAmount: "+String(WS_InsAmount)+Char(13)
//$String:=$String+"WS_ORCustomerEmail: "+String(WS_ORCustomerEmail)+Char(13)
//$String:=$String+"WS_ORCustomerEmailSend: "+String(WS_ORCustomerEmailSend)+Char(13)
//$String:=$String+"WS_ORCustomerPhone: "+WS_ORCustomerPhone+Char(13)
//$String:=$String+"WS_ORDateUnitRequired: "+WS_ORDateUnitRequired+Char(13)
//$String:=$String+"WS_ORUnitRateSelected: "+WS_ORUnitRateSelected+Char(13)
//$String:=$String+"WS_LengthStay: "+String(WS_LengthStay)+Char(13)
//
//WSRECORDLOG ($String)

//06/06/13 DAM Added 2 medium boxes to extra
APPEND TO ARRAY(WS_UnitTypeCodes;"M")
APPEND TO ARRAY(WS_ORUnitTypeNos;2)

C_TEXT($CurrencySymbol;$SizeQuoted)
C_LONGINT($Kg;KgFlat)
ARRAY TEXT($arFacilityCode;0)
C_LONGINT($TotUnit;$KgFlat)
C_REAL($Insurance;$BnSRent)

COPY ARRAY(WS_ORUnitTypeNos;$Temp)
ARRAY TEXT(WS_BoxID;0)
SORT ARRAY($Temp;<)
ARRAY TEXT($UnitNumbers;Size of array(WS_UnitTypeCodes);$Temp{1})
ARRAY LONGINT($NoUnits;Size of array(WS_UnitTypeCodes))
C_REAL($Min;$Calculate)
C_BOOLEAN($Aval)
$Aval:=False
$KgFlat:=0

If (Size of array(WS_ORUnitTypeNos)#0)
For ($v;1;Size of array(WS_ORUnitTypeNos)-1)//04/06/13 DAM Added to exlude wight calculation in the price
$KgFlat:=$KgFlat+(WS_ORUnitTypeNos{$v}*1)
End for 
End if 

$CurrencySymbol:=GetTextNo ([Facility]CurrencyFormat;1;";")
$NoUnit:=0
$SizeQuoted:=""
$Min:=0
WS_ORTotal:=0
WS_Deposit:=0
WS_ORErrorCode:=0
WS_ORErrorDescription:=""
WS_ORSuccess:=True
$Kg:=0
KgFlat:=0
ARRAY TEXT(Attachments;0)
$Existing:=False

READ WRITE([Customer])
READ WRITE([Reservation])
READ WRITE([Unit])
READ WRITE([Trxs])
READ WRITE([Contacts])
READ WRITE([Analysis])
READ WRITE([Facility])
READ WRITE([BarCode])

// Calculate the size of the package, each box 25 KG
If (Size of array(WS_ORUnitTypeNos)#0)
For ($v;1;Size of array(WS_ORUnitTypeNos)-1)//04/06/13 DAM Added to exclude weight calculation in the price
$Kg:=$Kg+(WS_ORUnitTypeNos{$v}*25)
KgFlat:=KgFlat+(WS_ORUnitTypeNos{$v}*1)
End for 
End if 

//Check for a shipping
QUERY([Shipping];[Shipping]PostCode=WS_PostCode;*)
QUERY([Shipping]; & ;[Shipping]Suburb=WS_StreetSuburb)
If (Records in selection([Shipping])=0)
WS_ORErrorCode:=16
WS_ORErrorDescription:="Please check entered post code and Suburb: "+String(WS_PostCode)+" "+WS_StreetSuburb
WS_ORSuccess:=False
End if 

QUERY([Shipping];[Shipping]PostCode=WS_PostCode;*)
QUERY([Shipping]; & ;[Shipping]Suburb=WS_StreetSuburb;*)
QUERY([Shipping]; & ;[Shipping]MaxKg>=$Kg;*)
QUERY([Shipping]; & ;[Shipping]MinKg<$Kg)

If (Records in selection([Shipping])#0) & (WS_ORSuccess)
SELECTION TO ARRAY([Shipping]FacilityCode;$arFacilityCode)
ARRAY REAL($PriceperFacility;Size of array($arFacilityCode))

//Price per Facility

For ($f;1;Size of array($arFacilityCode))
QUERY([Facility];[Facility]FacilityCode=$arFacilityCode{$f})

//Price per UnitType
$NoUnit:=0
For ($z;1;Size of array(WS_UnitTypeCodes)-1)//  04/06/13 DAM Added to avoid calculation for 2 extra boxes
QUERY([UnitType];[UnitType]RUnitType=$arFacilityCode{$f}+WS_UnitTypeCodes{$z})

If (Records in selection([UnitType])>0)
If (WS_LengthStay#0)

//Price Per Rate
//DAM Added $Calculate as expression didn't calculate correctly
If (WS_ORUnitRateSelected="W")
$PriceperFacility{$f}:=$PriceperFacility{$f}+([UnitType]WeeklyRate*WS_ORUnitTypeNos{$z}*WS_LengthStay)
Else 
// Monthly Rate * No of Units Required * Length of stay
$PriceperFacility{$f}:=$PriceperFacility{$f}+([UnitType]MonthlyRate*WS_ORUnitTypeNos{$z}*WS_LengthStay)
End if 
Else 
If (WS_ORUnitRateSelected="W")
$PriceperFacility{$f}:=$PriceperFacility{$f}+([UnitType]WeeklyRate*WS_ORUnitTypeNos{$z})
Else 
$PriceperFacility{$f}:=$PriceperFacility{$f}+([UnitType]MonthlyRate*WS_ORUnitTypeNos{$z})
End if 
End if 

$NoUnit:=$NoUnit+WS_ORUnitTypeNos{$z}
Else 
WS_ORErrorCode:=6
WS_ORErrorDescription:="Unit Type Record not found!"
WS_ORSuccess:=False
End if 
End for 

For ($z;1;Size of array(WS_UnitTypeCodes))//  Cannot be done in the previous loop as Deposit is calcultaed for extra boxes too
QUERY([UnitType];[UnitType]RUnitType=$arFacilityCode{$f}+WS_UnitTypeCodes{$z})
//Deposit per Unit
If ([UnitType]DepositAmt#0)
$PriceperFacility{$f}:=$PriceperFacility{$f}+([UnitType]DepositAmt*WS_ORUnitTypeNos{$z})
End if 
End for 

//Rent for B&S
QUERY([Analysis];[Analysis]Code=$arFacilityCode{$f}+"RF1")
If (Records in selection([Analysis])=1)

//Per Month
$BnSRent:=[Analysis]DfltSellAmt*($NoUnit)// BnS Rent Per month for all Units
If (WS_ORUnitRateSelected="W")
$BnSRent:=$BnSRent*[Facility]RentWeeklyMthly
End if 
If (WS_LengthStay#0)
$BnSRent:=$BnSRent*WS_LengthStay
End if 
$PriceperFacility{$f}:=$PriceperFacility{$f}+$BnSRent
End if 


//Delivery Price
QUERY([Analysis];[Analysis]Code=$arFacilityCode{$f}+"@";*)
QUERY([Analysis]; & ;[Analysis]SpecialOptions=6)
If (Records in selection([Analysis])=1)
//Delivery Price from customer to depot
QUERY([Shipping];[Shipping]FacilityCode=$arFacilityCode{$f};*)
QUERY([Shipping]; & ;[Shipping]PostCode=WS_PostCode;*)
QUERY([Shipping]; & ;[Shipping]Suburb=WS_StreetSuburb;*)
QUERY([Shipping]; & ;[Shipping]MaxKg>=$Kg;*)
QUERY([Shipping]; & ;[Shipping]MinKg<$Kg)

If (Records in selection([Shipping])=0)
$PriceperFacility{$f}:=$PriceperFacility{$f}+1000000
Else 
$PriceperFacility{$f}:=$PriceperFacility{$f}+[Shipping]Price
End if 

//Delivery Price from depot to customer
QUERY([Shipping];[Shipping]FacilityCode=$arFacilityCode{$f};*)
QUERY([Shipping]; & ;[Shipping]PostCode=WS_PostCode;*)
QUERY([Shipping]; & ;[Shipping]Suburb=WS_StreetSuburb;*)
QUERY([Shipping]; & ;[Shipping]MaxKg>=KgFlat;*)
QUERY([Shipping]; & ;[Shipping]MinKg<KgFlat)

If (Records in selection([Shipping])=0)
$PriceperFacility{$f}:=$PriceperFacility{$f}+1000000
Else 
$PriceperFacility{$f}:=$PriceperFacility{$f}+[Shipping]Price
End if 

Else 
WS_ORErrorCode:=14
WS_ORErrorDescription:="Check the shipping Analysis Code for facility: "+String($arFacilityCode{$f})
WS_ORSuccess:=False
End if 

//Compulsory Insurance Cost
QUERY([Analysis];[Analysis]Code=$arFacilityCode{$f}+"IN")
If (Records in selection([Analysis])#0)
If (WS_ORUnitRateSelected="W")
If (WS_LengthStay#0)
$PriceperFacility{$f}:=$PriceperFacility{$f}+([Analysis]DfltSellAmt*[Facility]InsWeeklyMthly*WS_LengthStay*$NoUnit)
Else 
$PriceperFacility{$f}:=$PriceperFacility{$f}+([Analysis]DfltSellAmt*[Facility]InsWeeklyMthly*$NoUnit)
End if 
Else 
If (WS_LengthStay#0)
$PriceperFacility{$f}:=$PriceperFacility{$f}+([Analysis]DfltSellAmt*WS_LengthStay*$NoUnit)
Else 
$PriceperFacility{$f}:=$PriceperFacility{$f}+([Analysis]DfltSellAmt*$NoUnit)
End if 
End if 
End if 

//EXTRA Insurance cost
If (WS_ORInsurance)
QUERY([Analysis];[Analysis]Code=$arFacilityCode{$f}+"IN")
If (Records in selection([Analysis])#0)

If (WS_InsAmount>0)
QUERY([InsuranceRates];[InsuranceRates]Facility=$arFacilityCode{$f})
$Insurance:=WS_InsAmount*[InsuranceRates]Premium
WSRecordLog ("Insurance: "+String($Insurance))
If (WS_ORUnitRateSelected="W")
If (WS_LengthStay#0)
$PriceperFacility{$f}:=$PriceperFacility{$f}+($Insurance*[Facility]InsWeeklyMthly*WS_LengthStay*$NoUnit)//04/06/13 DAM Added 
Else 
$PriceperFacility{$f}:=$PriceperFacility{$f}+($Insurance*[Facility]InsWeeklyMthly*$NoUnit)
End if 
Else 
If (WS_LengthStay#0)
$PriceperFacility{$f}:=$PriceperFacility{$f}+($Insurance*WS_LengthStay*$NoUnit)//04/06/13 DAM Added 
Else 
$PriceperFacility{$f}:=$PriceperFacility{$f}+($Insurance*$NoUnit)
End if 
End if 

End if 

Else 
WS_ORErrorCode:=15
WS_ORErrorDescription:="No Insurance found in Storman"
End if 
End if 

//Deposit on MI
QUERY([Analysis];[Analysis]Code=$arFacilityCode{$f}+"DP";*)
QUERY([Analysis]; & ;[Analysis]BillMoveIn=True;*)
QUERY([Analysis]; & ;[Analysis]Inactive=False)
If (Records in selection([Analysis])=1)

If (OR_ReadOResXML ="True")
$DepositAmt:=OR_ReadOResXML ("Deposit";$arFacilityCode{$f})
If ($DepositAmt#"")
$PriceperFacility{$f}:=$PriceperFacility{$f}+Num($DepositAmt)
Else 
$PriceperFacility{$f}:=$PriceperFacility{$f}+[Analysis]DfltSellAmt
End if 
Else 
$PriceperFacility{$f}:=$PriceperFacility{$f}+[Analysis]DfltSellAmt
End if 
End if 
WSRecordLog ("Price Per facility: "+$arFacilityCode{$f}+" ="+String($PriceperFacility{$f}))
End for 


//Find cheepest
SORT ARRAY($PriceperFacility;$arFacilityCode;>)
//Find the available units
If (WS_ORSuccess=True)

For ($r;1;Size of array($arFacilityCode))

For ($z;1;Size of array(WS_UnitTypeCodes))
QUERY([UnitType];[UnitType]RUnitType=$arFacilityCode{$r}+WS_UnitTypeCodes{$z})
RELATE MANY([UnitType]RUnitType)
QUERY SELECTION([Unit];[Unit]Vacant=True;*)
QUERY SELECTION([Unit]; & ;[Unit]Status#"Company";*)
QUERY SELECTION([Unit]; & ;[Unit]Status#"Reserved";*)
QUERY SELECTION([Unit]; & ;[Unit]Status#"Repair";*)
QUERY SELECTION([Unit]; & ;[Unit]Status#"Unavail")
ORDER BY([Unit];[Unit]UnitNo;>)
QUERY([Analysis];[Analysis]Code=[Facility]FacilityCode+"@";*)
QUERY([Analysis]; & ;[Analysis]SortOrder=2)
FIRST RECORD([Unit])

//04/06/13 DAM Added to reserve correct units for extra boxes. Unit Type for extra boxes is the last one
WSRecordLog ("Line 319")

If (Records in selection([Unit])#0)
For ($j;1;Size of array(WS_UnitTypeCodes))
$Pos:=Find in array($UnitNumbers{$j};[Unit]RUnitNo)
While ($Pos#-1)
NEXT RECORD([Unit])

//24/06/13 To fix the end of selection issue
If ([Unit]RUnitNo#"")
$Pos:=Find in array($UnitNumbers{$j};[Unit]RUnitNo)
Else 
$Pos:=-1
End if 

End while 
End for 
End if 

WSRecordLog ("Line 338")
$NoUnits{$z}:=0
If ([Unit]RUnitNo#"")
For ($a;1;Records in selection([Unit]))
If ((Locked([Unit])=True) | (Read only state([Unit])=True)) & (End selection([Unit])=False)
Else 
$NoUnits{$z}:=$NoUnits{$z}+1
$UnitNumbers{$z}{$NoUnits{$z}}:=[Unit]RUnitNo
End if 
If (WS_ORUnitTypeNos{$z}#$NoUnits{$z})
NEXT RECORD([Unit])
Else 
$a:=Records in selection([Unit])
End if 
End for 
End if 
End for 

WSRecordLog ("Line 356")
//check if there are units available -> skip looping through all facilities
$Aval:=True
For ($q;1;Size of array($NoUnits))
If ($NoUnits{$q}#WS_ORUnitTypeNos{$q})
$Aval:=False
End if 
End for 

If ($Aval=True)
$Facility:=$arFacilityCode{$r}
WS_ORTotal:=$PriceperFacility{$r}
$r:=Size of array($arFacilityCode)
QUERY([Facility];[Facility]FacilityCode=$Facility)
End if 
End for 

If ($Aval=False)
WS_ORErrorCode:=2
WS_ORErrorDescription:="No Units Available"
WS_ORSuccess:=False
End if 
End if 

Else 
WS_ORErrorCode:=13
WS_ORErrorDescription:="Please check entered number of boxes"
WS_ORSuccess:=False
End if 

If (WS_ORSuccess=True)
If (WS_WebServicePassword=[Facility]ODBCPassword) & ([Facility]ODBCPassword#"")
Else 
WS_ORErrorCode:=99
WS_ORErrorDescription:="Incorrect password"
WS_ORSuccess:=False
End if 
End if 

If (WS_ORSuccess=True)//Check the Date Required Date
If (Date(WS_ORDateUnitRequired)<Current date)
WS_ORSuccess:=False
WS_ORErrorCode:=11
WS_ORErrorDescription:="Invalid Reservation Date!"
End if 
End if 

If (WS_ORSuccess=True)//Check the Customer Email Address
If (Length(WS_ORCustomerEmail)<1)
WS_ORErrorCode:=2
WS_ORErrorDescription:="Invalid Customer Email Address!"
End if 
End if 

If (WS_ORSuccess=True)//Check the Facility Email Address
If (Length([Facility]OResFacNotifEmail)<1)
WS_ORErrorCode:=8
WS_ORErrorDescription:="Reservation Notification Email Address not defined in Storman!"
End if 
End if 

If (WS_ORSuccess=True) & (Length(WS_ORCustomerName)<1)//Check the Customer Name
WS_ORErrorCode:=3
WS_ORErrorDescription:="Invalid Customer Name!"
WS_ORSuccess:=False
End if 

WSRecordLog ("Line 364")

If (WS_ORSuccess=True) & ($Existing=False)//Create the Customer
ORName:=WS_ORCustomerName
ORName:=RemoveSpecial (ORName)
If (ORName#"")
CREATE RECORD([Customer])
$i:=0
$Base:=Substring(Uppercase(Replace string(Replace string(ORName;" ";"");",";""));1;6)
Repeat 
$j:=5-Length(String($i;"#####"))
$Code:=[Facility]FacilityCode+Substring($Base;1;$j)+String($i;"#####")
$i:=$i+1
Until (Find in field([Customer]CustomerCode;$Code)<0)
[Customer]CustomerCode:=$Code
[Customer]CustomerName:=WS_ORCustomerName
[Customer]EmailAddress:=WS_ORCustomerEmail
[Customer]PhonePrivate:=WS_ORCustomerPhone
[Customer]StreetAddress:=WS_StreetAddress
[Customer]StreetSuburb:=WS_StreetSuburb
[Customer]StreetZIPCode:=String(WS_PostCode)
[Customer]MarketSrce:="Web"
[Customer]Password:=[Customer]CustomerCode
$i:=Position(",";[Customer]CustomerName)
If ($i>0) & ([Facility]AutoFirstName>1)
[Customer]FirstName:=Reverse ([Customer]CustomerName;[Facility]AutoFirstName)
End if 
[Customer]GateTimeZone:=[Facility]GateTimeZoneDefault
SAVE RECORD([Customer])
Else 
WS_ORErrorCode:=4
WS_ORErrorDescription:="Customer Name contains Invalid characters!"
WS_ORSuccess:=False
End if 
End if 
READ WRITE([Contacts])

WSRecordLog ("Customer Record"+[Customer]CustomerCode+" is saved and ORSuccess="+String(WS_ORSuccess))

If (WS_ORSuccess=True)//Create Reservation
//ORes.xml
If (OR_ReadOResXML ="True")//Does the XML file exist?
$vtCreatechargeTransaction:=OR_ReadOResXML ("ChargeTransaction";"Create")//Find out what the deposit value for this Facility Code is
If ($vtCreatechargeTransaction="")//If value not found then default to True - Create Charge Transaction
$vtCreatechargeTransaction:="TRUE"
End if 
Else 
$vtCreatechargeTransaction:="TRUE"
End if 
CREATE RECORD([Reservation])
[Reservation]ActiveReserve:=True
[Reservation]CustomerCode:=[Customer]CustomerCode
[Reservation]DateDepPaid:=!00-00-00!
[Reservation]DepositAmt:=0
If ($vtCreatechargeTransaction#"TRUE") | ([Facility]AgreeOnlyDeposit=True)
[Reservation]DepositAmt:=0
Else 
If (OR_ReadOResXML ="True")
$DepositAmt:=OR_ReadOResXML ("Deposit";$Facility)
If ($DepositAmt#"")
[Reservation]DepositAmt:=Num($DepositAmt)
End if 
End if 
End if 

[Reservation]ExpMoveIn:=Date(WS_ORDateUnitRequired)
[Reservation]ReservedDate:=Current date
[Reservation]ReservedTime:=Current time
[Reservation]Balance:=[Reservation]DepositAmt
[Reservation]UserLogin:="Web"
[Reservation]CallTakenBy:="Web"
[Reservation]OutcomeDate:=!00-00-00!
[Reservation]OnlineRes:=True
[Reservation]BoxnStore:=String(WS_LengthStay)+","+String(WS_ORInsurance)+","+String(WS_InsAmount)+",Deposit"
If (WS_ORUnitRateSelected="W")
[Reservation]Weekly:=True
Else 
[Reservation]Weekly:=False
End if 
If ([Reservation]ReserveNo="")
$vliNextReserveNo:=[Facility]NextReserveNo
$Continue:=False
If (Not(Semaphore("<>bNextResNo";1800)))
$Continue:=True
End if 
If ($Continue)
//10285

//If (Application type=4D Remote Mode)
GET PROCESS VARIABLE(-1;<>aiNextResNo;<>aiNextResNo)
GET PROCESS VARIABLE(-1;<>asAllSiteCodes;<>asAllSiteCodes)
//End if 
$arraypos:=Find in array(<>asAllSiteCodes;[Facility]FacilityCode)

WSRecordLog ("Facility Code"+[Facility]FacilityCode+" line 475 number in array "+String($arraypos))
Repeat 

//If (<>aiNextResNo{$arraypos}>[Facility]NextReserveNo)
//ConfirmTwo (Get localized string("It appears the next reservation number of")+" "+String([Facility]NextReserveNo;"00000000")+" "+Get localized string("is already in use. Do you wish to use the next number?");Get localized string("Yes");Get localized string("No"))
//If (OK=1)
[Reservation]ReserveNo:=String(<>aiNextResNo{$arraypos};"00000000")
[Facility]NextReserveNo:=<>aiNextResNo{$arraypos}+1
//Else 
//[Reservation]ReserveNo:=String([Facility]NextReserveNo;"00000000")
//[Facility]NextReserveNo:=[Facility]NextReserveNo+1
//End if 
//Else 
//[Reservation]ReserveNo:=String([Facility]NextReserveNo;"00000000")
//[Facility]NextReserveNo:=[Facility]NextReserveNo+1
//End if 
<>aiNextResNo{$arraypos}:=[Facility]NextReserveNo
$Key:=$Facility+[Reservation]ReserveNo
$i:=Find in field([Reservation]RReserveNo;$Key)
WSRecordLog ("Checking for available Res "+$Key)
Until ($i<0)
//If (Application type=4D Remote Mode)
VARIABLE TO VARIABLE(-1;<>aiNextResNo;<>aiNextResNo)
//End if 
CLEAR SEMAPHORE("<>bNextResNo")
Else 
Repeat 

[Reservation]ReserveNo:=String([Facility]NextReserveNo;"00000000")
[Facility]NextReserveNo:=[Facility]NextReserveNo+1

$Key:=$Facility+[Reservation]ReserveNo
$i:=Find in field([Reservation]RReserveNo;$Key)

Until ($i<0)
End if 
[Reservation]RReserveNo:=$Key
[Reservation]TaxExempt:=[Facility]TaxFreeDefault
End if 

SAVE RECORD([Reservation])

//Create Deposit trx for Reservation
If ($vtCreatechargeTransaction="TRUE")
QUERY([Analysis];[Analysis]Code=$Facility+"DP";*)
QUERY([Analysis]; & ;[Analysis]BillMoveIn=True;*)
QUERY([Analysis]; & ;[Analysis]Inactive=False)
If (Records in selection([Analysis])=1)
CREATE RECORD([Trxs])
[Trxs]AgreeNo:=[Reservation]RReserveNo
[Trxs]CustomerCode:=[Customer]CustomerCode
[Trxs]TrxDate:=Current date
[Trxs]Charge:=True
[Trxs]Qty:=1
[Trxs]DateFrom:=[Reservation]ExpMoveIn
[Trxs]TrxTime:=Current time
[Trxs]UserLogin:="Web"
[Trxs]AnalysisCode:=[Facility]FacilityCode+"DP"
[Trxs]Description:=[Analysis]Description+" Reservation "+[Reservation]ReserveNo
[Trxs]TotAmt:=[Analysis]DfltSellAmt//RoundAmt ([UnitType]DepositAmt)
[Trxs]TaxAmt:=CalcTaxAmt ([Trxs]TotAmt)
[Trxs]Confirmed:=False
If ([Trxs]TotAmt#0)
[Reservation]DepositAmt:=[Reservation]DepositAmt+[Trxs]TotAmt
WS_Deposit:=WS_Deposit+[Trxs]TotAmt
SAVE RECORD([Trxs])
End if 
End if 
End if 

$Tot:=0
For ($p;1;Size of array($NoUnits))
$Tot:=$Tot+$NoUnits{$p}
End for 

QUERY([Analysis];[Analysis]Code=$Facility+"TP";*)
QUERY([Analysis]; & ;[Analysis]Inactive=False)

If (Records in selection([Analysis])=1)
$Tape:=$Tot/5
If ($Tape#Trunc($Tape;0))
$Tape:=Trunc($Tape;0)+1
Else 
$Tape:=Trunc($Tape;0)
End if 
CREATE RECORD([Trxs])
[Trxs]AgreeNo:=[Reservation]RReserveNo
[Trxs]CustomerCode:=[Customer]CustomerCode
[Trxs]TrxDate:=Current date
[Trxs]Charge:=True
[Trxs]Qty:=$Tape
[Trxs]DateFrom:=[Reservation]ExpMoveIn
[Trxs]TrxTime:=Current time
[Trxs]UserLogin:="Web"
[Trxs]AnalysisCode:=[Analysis]Code
[Trxs]Description:=[Analysis]Description+" Reservation "+[Reservation]ReserveNo
[Trxs]TotAmt:=[Analysis]DfltSellAmt*$Tape//RoundAmt ([UnitType]DepositAmt)
[Trxs]TaxAmt:=CalcTaxAmt ([Trxs]TotAmt)
[Trxs]Confirmed:=False
If ([Trxs]TotAmt#0)
[Reservation]DepositAmt:=[Reservation]DepositAmt+[Trxs]TotAmt
WS_Deposit:=WS_Deposit+[Trxs]TotAmt
WS_ORTotal:=WS_ORTotal+[Trxs]TotAmt
SAVE RECORD([Trxs])
//04/06/15 DAM Analysis Code calculation
[Analysis]InvQtyonHand:=[Analysis]InvQtyonHand-$Tape
SAVE RECORD([Analysis])
End if 
End if 

QUERY([Analysis];[Analysis]Code=$Facility+"BW";*)
QUERY([Analysis]; & ;[Analysis]Inactive=False)

If (Records in selection([Analysis])=1)
$Bubblewrap:=$Tot*0.5
CREATE RECORD([Trxs])
[Trxs]AgreeNo:=[Reservation]RReserveNo
[Trxs]CustomerCode:=[Customer]CustomerCode
[Trxs]TrxDate:=Current date
[Trxs]Charge:=True
[Trxs]Qty:=$Bubblewrap
[Trxs]DateFrom:=[Reservation]ExpMoveIn
[Trxs]TrxTime:=Current time
[Trxs]UserLogin:="Web"
[Trxs]AnalysisCode:=[Analysis]Code
[Trxs]Description:=[Analysis]Description+" Reservation "+[Reservation]ReserveNo
[Trxs]TotAmt:=[Analysis]DfltSellAmt*$Bubblewrap//RoundAmt ([UnitType]DepositAmt)
[Trxs]TaxAmt:=CalcTaxAmt ([Trxs]TotAmt)
[Trxs]Confirmed:=False
If ([Trxs]TotAmt#0)
[Reservation]DepositAmt:=[Reservation]DepositAmt+[Trxs]TotAmt
WS_Deposit:=WS_Deposit+[Trxs]TotAmt
WS_ORTotal:=WS_ORTotal+[Trxs]TotAmt
SAVE RECORD([Trxs])
//04/06/15 DAM Analysis Code calculation
[Analysis]InvQtyonHand:=[Analysis]InvQtyonHand-$Bubblewrap
SAVE RECORD([Analysis])
End if 
End if 

$UnitDeposit:=0
For ($u;1;Size of array(WS_UnitTypeCodes))
For ($u1;1;Size of array($UnitNumbers{$u}))
If ($UnitNumbers{$u}{$u1}#"")
QUERY([Unit];[Unit]RUnitNo=$UnitNumbers{$u}{$u1})
QUERY([UnitType];[UnitType]RUnitType=[Unit]UnitTypeCode)
If ([Reservation]Weekly)
[Unit]QuotedRate:=[UnitType]WeeklyRate
Else 
[Unit]QuotedRate:=[UnitType]MonthlyRate
End if 

//Modify Unit Table values as appropriate
[Unit]ReservedTo:=[Reservation]RReserveNo
[Unit]ReserveDeposit:=[UnitType]DepositAmt
If ([Facility]AgreeOnlyDeposit=True) & ([Unit]Deposit=0)
RELATE ONE([Unit]UnitTypeCode)
[Unit]Deposit:=[UnitType]DepositAmt
[Agreement]DepositAmt:=[Agreement]DepositAmt+[Unit]Deposit
End if 
If ($vtCreatechargeTransaction#"TRUE")
[Unit]ReserveDeposit:=0
End if 
//16/09/14 DAM Added for Correct Deposit calculation
$UnitDeposit:=$UnitDeposit+[Unit]ReserveDeposit
//[Reservation]DepositAmt:=[Reservation]DepositAmt+[Unit]ReserveDeposit
[Reservation]UnitsReserved:=[Reservation]UnitsReserved+[Unit]UnitNo
[Unit]ReservedDate:=Current date
[Unit]LastStatusDate:=Current date
If ([Unit]Vacant=True)
[Unit]Status:="Reserved"
End if 

CREATE RECORD([BarCode])
[BarCode]ReserveNo:=[Reservation]RReserveNo
[BarCode]Active:=False
[BarCode]UnitNo:=[Unit]RUnitNo
//[BarCode]AnalysisCode:=WS_asAnalysis{$u}
SAVE RECORD([BarCode])
APPEND TO ARRAY(WS_BoxID;[BarCode]Code)
APPEND TO ARRAY(WS_BoxType;[UnitType]UnitTypeCode)
SAVE RECORD([Unit])
SAVE RECORD([Reservation])

//Create Deposit trx for Units
If ($vtCreatechargeTransaction="TRUE")
CREATE RECORD([Trxs])
[Trxs]AgreeNo:=[Reservation]RReserveNo
[Trxs]CustomerCode:=[Customer]CustomerCode
[Trxs]TrxDate:=Current date
[Trxs]Charge:=True
[Trxs]UnitNo:=[Unit]UnitNo
[Trxs]Qty:=1
[Trxs]DateFrom:=[Reservation]ExpMoveIn
[Trxs]TrxTime:=Current time
[Trxs]UserLogin:="Web"
[Trxs]AnalysisCode:=[Facility]FacilityCode+"DP"
QUERY([Analysis];[Analysis]Code=[Facility]FacilityCode+"DP")
[Trxs]Description:=[Analysis]Description+" Unit "+[Unit]UnitNo
[Trxs]TotAmt:=[Unit]ReserveDeposit
[Trxs]TaxAmt:=CalcTaxAmt ([Trxs]TotAmt)
[Trxs]Confirmed:=False
If ([Trxs]TotAmt#0)
[Reservation]DepositAmt:=[Reservation]DepositAmt+[Trxs]TotAmt
WS_Deposit:=WS_Deposit+[Trxs]TotAmt
SAVE RECORD([Trxs])
End if 
End if 

SAVE RECORD([Reservation])
End if 
End for 
End for 

//Flat Box Delivery
QUERY([Analysis];[Analysis]Code=$Facility+"@";*)
QUERY([Analysis]; & ;[Analysis]SpecialOptions=6)
If (Records in selection([Analysis])#0)
CREATE RECORD([Trxs])
[Trxs]AgreeNo:=[Reservation]RReserveNo
[Trxs]CustomerCode:=[Reservation]CustomerCode
[Trxs]TrxDate:=Current date
[Trxs]Charge:=True
[Trxs]UnitNo:=[Unit]UnitNo
[Trxs]Qty:=1
[Trxs]DateFrom:=[Reservation]ExpMoveIn
[Trxs]TrxTime:=Current time
[Trxs]UserLogin:="Web"
[Trxs]AnalysisCode:=[Analysis]Code
//Price from depot to customer
QUERY([Shipping];[Shipping]PostCode=WS_PostCode;*)
QUERY([Shipping]; & ;[Shipping]FacilityCode=$Facility;*)
QUERY([Shipping]; & ;[Shipping]Suburb=WS_StreetSuburb;*)
QUERY([Shipping]; & ;[Shipping]MaxKg>=$KgFlat;*)
QUERY([Shipping]; & ;[Shipping]MinKg<$KgFlat)
[Trxs]Description:=[Analysis]Description+" from Cust to Dep "+[Shipping]Type+" "+String([Shipping]PostCode)
[Trxs]TotAmt:=[Shipping]Price
WS_Deposit:=WS_Deposit+[Trxs]TotAmt
[Trxs]TaxAmt:=CalcTaxAmt ([Trxs]TotAmt)
[Trxs]Confirmed:=False
SAVE RECORD([Trxs])
End if 

WSRecordLog ("Line 817")

$MonthEarlier:=Add to date(Current date;0;-1;0)
QUERY([Facility];[Facility]SortOrder>=0;*)//Find all Facility records except the Head Office one
QUERY([Facility]; & ;[Facility]OnlineReserveIncl=True;*)
QUERY([Facility]; & ;[Facility]UseOnlineReservations=True;*)
QUERY([Facility]; & ;[Facility]UpgradesPaidTo>$MonthEarlier;*)
QUERY([Facility]; & ;[Facility]FacilityCode=$Facility)
vtFacilityCodeSelect:=$Facility
CREATE SET([Facility];"OnlineReservationsEntitled")
vtLoginPassword:=[Customer]Password
vtLoginUsername:=[Reservation]ReserveNo
vKinitekRef:="Deposit"
KinitekStorpay 
WS_Code:=vtOnlineReservationContent
viMatch:=0
bPrtRec:=0
bEmailReceipt:=0
bAll:=0
asShowHistory:=1
ReCalc 
SAVE RECORD([Reservation])

QUERY([Facility];[Facility]FacilityCode=$Facility)
If (WS_ORCustomerEmailSend)
If ([Facility]OResFacNotifEmail#"")
$cr:=Char(13)+Char(10)
$MessageBody:="A new Online Reservation has been created:"+$cr
$MessageBody:=$MessageBody+"Reservation Number: "+[Facility]FacilityCode+[Reservation]ReserveNo+$cr
$MessageBody:=$MessageBody+"Date: "+String(Current date;5)+$cr
$MessageBody:=$MessageBody+"Time: "+String(Current time)+$cr
$MessageBody:=$MessageBody+"Customer Name: "+WS_ORCustomerName+";"+$cr
$MessageBody:=$MessageBody+"Email Address: "+WS_ORCustomerEmail+$cr
$MessageBody:=$MessageBody+"Phone Number: "+WS_ORCustomerPhone+$cr
$MessageBody:=$MessageBody+"Facility: "+[Facility]FacilityName+$cr
$MessageBody:=$MessageBody+"Description: "+[UnitType]Description+$cr
$MessageBody:=$MessageBody+"Reservation Deposit Cost: "+$CurrencySymbol+String(([Reservation]DepositAmt+$UnitDeposit);"#####0.00")+$cr
$MessageBody:=$MessageBody+"Date Required: "+WS_ORDateUnitRequired+$cr
If ([Reservation]Weekly=True)
$WeeklyMonthly:="Weekly"
Else 
$WeeklyMonthly:="Monthly"
End if 
$MessageBody:=$MessageBody+"Weekly / Monthly: "+$WeeklyMonthly+$cr
//Create the Email Message
CREATE RECORD([Message])
[Message]Subject:=[Facility]BusinessName+AddDelimitedTextIfNotBlank ([Facility]FacilityName;",";" ")+" - Your Online Reservation has been created."
[Message]Address:=[Facility]OResFacNotifEmail
[Message]OutIn:=True
[Message]MsgDate:=Current date
[Message]MsgTime:=Current time
[Message]MsgBody:=$MessageBody
[Message]Attachments:=""
[Message]Facility:=[Facility]FacilityCode
SAVE RECORD([Message])
$OK:=OR_NewMailMessage ("";[Facility]OResFacNotifEmail;"";"";[Facility]BusinessName+AddDelimitedTextIfNotBlank ([Facility]FacilityName;",";" ")+" - New Online Reservation";$MessageBody;False;->Attachments;"";"";"";"";"";"";"")//Notification Email to Facility
If ($OK=True)//Email Failed
[Message]SentDate:=Current date
[Message]SentRead:=True
SAVE RECORD([Message])
READ ONLY([Message])
UNLOAD RECORD([Message])
Else 
WS_ORErrorCode:=9//Email Failed
WS_ORErrorDescription:="Facility Notification Email failed!"
End if 
End if 
End if 

If (WS_ORCustomerEmailSend)
If ([Facility]EmailAddress#"")
vtDepositAmt:=String(WS_Deposit)
vtDateUnitRequired:=WS_ORDateUnitRequired
$OK:=OR_EmailCust //("";"";"";"";"";"";False;->Attachments;"";"";"";"";"";"";"")  `Notification Email to Customer - details of email are filled in from 'OR_EmailNotice' method 
If ($OK=False)//Email Failed
WS_ORErrorCode:=10//Email Failed
WS_ORErrorDescription:="Customer Notification Email failed!"
End if 
End if 
End if 
End if 

If (WS_ORSuccess=True)
WS_ReservationID:=[Reservation]RReserveNo
VALIDATE TRANSACTION
Else 
WS_ORTotal:=0
CANCEL TRANSACTION
End if 

READ ONLY([Contacts])
READ ONLY([Customer])
READ ONLY([Reservation])
READ ONLY([Unit])
READ ONLY([Trxs])
READ ONLY([Contacts])
READ ONLY([Analysis])
READ ONLY([Facility])
READ ONLY([BarCode])
UNLOAD RECORD([Reservation])
UNLOAD RECORD([Customer])
UNLOAD RECORD([Unit])
UNLOAD RECORD([Contacts])
UNLOAD RECORD([Trxs])
UNLOAD RECORD([Analysis])
UNLOAD RECORD([BarCode])

ReadOnlyAll 
UnloadAll 

$String:="End WS_BnSCreateRes"+Char(13)
$String:=$String+"WS_ORSuccess: "+String(WS_ORSuccess)+Char(13)
$String:=$String+"WS_ORTotal: "+String(WS_ORTotal)+Char(13)
$String:=$String+"WS_Deposit: "+String(WS_Deposit)+Char(13)
$String:=$String+"WS_ORErrorCode: "+String(WS_ORErrorCode)+Char(13)
$String:=$String+"WS_ORErrorDescription: "+WS_ORErrorDescription+Char(13)
$String:=$String+"WS_ReservationID: "+WS_ReservationID+Char(13)

$vlElem:=1
$sizeofarray:=Size of array(WS_BoxID)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_BoxID("+String($vlElem)+"):"+WS_BoxID{$vlElem}+Char(13)
End for 
$String:=$String+"WS_Code: "+WS_Code+Char(13)
$vlElem:=1
$sizeofarray:=Size of array(WS_BoxType)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_BoxType("+String($vlElem)+"):"+WS_BoxType{$vlElem}+Char(13)
End for 

WSRecordLog ($String)
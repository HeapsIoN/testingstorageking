//%attributes = {"lang":"en"} comment added and reserved by 4D.

// ----------------------------------------------------
// User name (OS): robert.richardson
// Date and time: 07/04/10, 09:55:15
// ----------------------------------------------------
// Method: WS_GetUnitTypes
// Description
// Web service to get the list of unit types, price, deposit etc and how many are available
//
// Parameters
//
// ----------------------------------------------------

SOAP DECLARATION(WS_FacilityCode;Is string var;SOAP input;"WS_FacilityCode")
SOAP DECLARATION(WS_WebServicePassword;Is text;SOAP input)

SOAP DECLARATION(WS_asUTDescription;String array;SOAP output;"WS_UTDescription")
SOAP DECLARATION(WS_arUTMonthlyRate;Real array;SOAP output;"WS_UTMonthlyRate")
SOAP DECLARATION(WS_asUTBillPlanCode;String array;SOAP output;"WS_UTBillPlanCode")
SOAP DECLARATION(WS_abUTDispOnlineReserve;Boolean array;SOAP output;"WS_UTDispOnlineReserve")
SOAP DECLARATION(WS_abUTRCSpecial;Boolean array;SOAP output;"WS_UTRCSpecial")
SOAP DECLARATION(WS_asUTRUnitType;String array;SOAP output;"WS_UTRUnitType")
SOAP DECLARATION(WS_asUTUnitCategory;String array;SOAP output;"WS_UTUnitCategory")
SOAP DECLARATION(WS_aiUTSortOrder;Integer array;SOAP output;"WS_UTSortOrder")
SOAP DECLARATION(WS_aiUTNoVacant;Integer array;SOAP output;"WS_UTNoVacant")
SOAP DECLARATION(WS_asUTSizeCategory;String array;SOAP output;"WS_UTSizeCategory")
SOAP DECLARATION(WS_arUTMonthlySpecialRate;Real array;SOAP output;"WS_UTMonthlySpecialRate")
SOAP DECLARATION(WS_arUTArea;Real array;SOAP output;"WS_UTArea")
SOAP DECLARATION(WS_aiUTNoTotal;Integer array;SOAP output;"WS_UTNoTotal")
SOAP DECLARATION(WS_arUTUnitTypeLength;Real array;SOAP output;"WS_UTUnitTypeLength")
SOAP DECLARATION(WS_arUTUnitTypeWidth;Real array;SOAP output;"WS_UTUnitTypeWidth")

SOAP DECLARATION(WS_ORSuccess;Is Boolean;SOAP output)
SOAP DECLARATION(WS_ORErrorCode;Is integer;SOAP output)
SOAP DECLARATION(WS_ORErrorDescription;Is string var;SOAP output)

ARRAY TEXT(WS_asUTDescription;0)
ARRAY REAL(WS_arUTMonthlyRate;0)
ARRAY TEXT(WS_asUTBillPlanCode;0)
ARRAY BOOLEAN(WS_abUTDispOnlineReserve;0)
ARRAY BOOLEAN(WS_abUTRCSpecial;0)
ARRAY TEXT(WS_asUTRUnitType;0)
ARRAY TEXT(WS_asUTUnitCategory;0)
ARRAY LONGINT(WS_aiUTSortOrder;0)
ARRAY LONGINT(WS_aiUTNoVacant;0)
ARRAY TEXT(WS_asUTSizeCategory;0)
ARRAY REAL(WS_arUTMonthlySpecialRate;0)
ARRAY REAL(WS_arUTArea;0)
ARRAY LONGINT(WS_aiUTNoTotal;0)
ARRAY REAL(WS_arUTUnitTypeLength;0)
ARRAY REAL(WS_arUTUnitTypeWidth;0)


QUERY([Facility];[Facility]FacilityCode=WS_FacilityCode)

If (Records in selection([Facility])=1)

If ((WS_WebServicePassword=[Facility]ODBCPassword) & ([Facility]ODBCPassword#"")) | ([Facility]FacilityCode="ALASA")// second condition is for iPad to work on Onehunga All Secure

ALL RECORDS([UnitType])
ORDER BY([UnitType]RUnitType)
SELECTION TO ARRAY([UnitType]Description;WS_asUTDescription;[UnitType]MonthlyRate;WS_arUTMonthlyRate;[UnitType]BillPlanCode;WS_asUTBillPlanCode;[UnitType]DispOnlineReserve;WS_abUTDispOnlineReserve;[UnitType]RCSpecial;WS_abUTRCSpecial;[UnitType]RUnitType;WS_asUTRUnitType;[UnitType]UnitCategory;WS_asUTUnitCategory;[UnitType]SortOrder;WS_aiUTSortOrder;[UnitType]SizeCategory;WS_asUTSizeCategory;[UnitType]MonthlySpecialRate;WS_arUTMonthlySpecialRate;[UnitType]Area;WS_arUTArea;[UnitType]NoTotal;WS_aiUTNoTotal;[UnitType]UnitTypeLength;WS_arUTUnitTypeLength;[UnitType]UnitTypeWidth;WS_arUTUnitTypeWidth)

ALL RECORDS([Unit])
SELECTION TO ARRAY([Unit]UnitNo;WSD_UnitNo;[UnitType]MonthlyRate;WS_arUTMonthlyRate;[UnitType]BillPlanCode;WS_asUTBillPlanCode;[UnitType]DispOnlineReserve;WS_abUTDispOnlineReserve;[UnitType]RCSpecial;WS_abUTRCSpecial;[UnitType]RUnitType;WS_asUTRUnitType;[UnitType]UnitCategory;WS_asUTUnitCategory;[UnitType]SortOrder;WS_aiUTSortOrder;[UnitType]SizeCategory;WS_asUTSizeCategory;[UnitType]MonthlySpecialRate;WS_arUTMonthlySpecialRate;[UnitType]Area;WS_arUTArea;[UnitType]NoTotal;WS_aiUTNoTotal;[UnitType]UnitTypeLength;WS_arUTUnitTypeLength;[UnitType]UnitTypeWidth;WS_arUTUnitTypeWidth)


ALL RECORDS([Agreement])
ALL RECORDS([Customer])
ALL RECORDS([Trxs])
ALL RECORDS([Analysis])
ALL RECORDS([BillPlan])

ALL RECORDS([Analysis])
ALL RECORDS([Analysis])
ALL RECORDS([Analysis])



If (WS_RetrieveAll=True)

ALL RECORDS([UnitType])



ARRAY LONGINT(WS_aiUTNoVacant;Size of array(WS_asUTRUnitType))

For ($i;1;Size of array(WS_asUTRUnitType))

If (WS_VacantAll=True)
QUERY([Unit];[Unit]UnitTypeCode=WS_asUTRUnitType{$i};*)
QUERY([Unit]; & ;[Unit]Status#"Unavail";*)

//2/12/14 DAM Added for KSS
If ([Facility]FacilityCode="KE@")
QUERY([Unit]; & ;[Unit]Status#"Repair";*)
QUERY([Unit]; & ;[Unit]Status#"Company";*)
QUERY([Unit]; & ;[Unit]Status#"Reserved";*)
End if 

QUERY([Unit]; & ;[Unit]Vacant=True)
WS_aiUTNoVacant{$i}:=Records in selection([Unit])
Else 
QUERY([Unit];[Unit]UnitTypeCode=WS_asUTRUnitType{$i};*)
QUERY([Unit]; & ;[Unit]Status="Vacant")
WS_aiUTNoVacant{$i}:=Records in selection([Unit])
End if 
End for 
WS_ORSuccess:=True
WS_ORErrorCode:=0
WS_ORErrorDescription:=""
Else 

QUERY([UnitType];[UnitType]RUnitType=WS_FacilityCode+"@")

SELECTION TO ARRAY([UnitType]Description;WS_asUTDescription;[UnitType]MonthlyRate;WS_arUTMonthlyRate;[UnitType]BillPlanCode;WS_asUTBillPlanCode;[UnitType]DispOnlineReserve;WS_abUTDispOnlineReserve;[UnitType]RCSpecial;WS_abUTRCSpecial;[UnitType]RUnitType;WS_asUTRUnitType;[UnitType]UnitCategory;WS_asUTUnitCategory;[UnitType]SortOrder;WS_aiUTSortOrder;[UnitType]SizeCategory;WS_asUTSizeCategory;[UnitType]MonthlySpecialRate;WS_arUTMonthlySpecialRate;[UnitType]Area;WS_arUTArea;[UnitType]NoTotal;WS_aiUTNoTotal;[UnitType]UnitTypeLength;WS_arUTUnitTypeLength;[UnitType]UnitTypeWidth;WS_arUTUnitTypeWidth)
ARRAY LONGINT(WS_aiUTNoVacant;Size of array(WS_asUTRUnitType))

For ($i;1;Size of array(WS_asUTRUnitType))
If (WS_VacantAll=True)
QUERY([Unit];[Unit]UnitTypeCode=WS_asUTRUnitType{$i};*)
QUERY([Unit]; & ;[Unit]Status#"Unavail";*)

//2/12/14 DAM Added for KSS
If ([Facility]FacilityCode="KE@")
QUERY([Unit]; & ;[Unit]Status#"Repair";*)
QUERY([Unit]; & ;[Unit]Status#"Company";*)
QUERY([Unit]; & ;[Unit]Status#"Reserved";*)
End if 

QUERY([Unit]; & ;[Unit]Vacant=True)
WS_aiUTNoVacant{$i}:=Records in selection([Unit])
Else 
QUERY([Unit];[Unit]UnitTypeCode=WS_asUTRUnitType{$i};*)
QUERY([Unit]; & ;[Unit]Status="Vacant")
WS_aiUTNoVacant{$i}:=Records in selection([Unit])
End if 
End for 
WS_ORSuccess:=True
WS_ORErrorCode:=0
WS_ORErrorDescription:=""
End if 

Else 
WS_ORSuccess:=False
WS_ORErrorCode:=1099
WS_ORErrorDescription:="Web Service Password is incorrect."
End if 

Else 
WS_ORSuccess:=False
WS_ORErrorCode:=1001
WS_ORErrorDescription:="Facility record not found in database Storman."
End if 

$String:="End WS_GetUnitTypes"+Char(13)
$vlElem:=1
$sizeofarray:=Size of array(WS_asUTDescription)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_asUTDescription("+String($vlElem)+"):"+WS_asUTDescription{$vlElem}+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_arUTMonthlyRate)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_arUTMonthlyRate("+String($vlElem)+"):"+String(WS_arUTMonthlyRate{$vlElem})+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_asUTBillPlanCode)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_asUTBillPlanCode("+String($vlElem)+"):"+WS_asUTBillPlanCode{$vlElem}+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_abUTDispOnlineReserve)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_abUTDispOnlineReserve("+String($vlElem)+"):"+String(WS_abUTDispOnlineReserve{$vlElem})+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_abUTRCSpecial)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_abUTRCSpecial("+String($vlElem)+"):"+String(WS_abUTRCSpecial{$vlElem})+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_asUTRUnitType)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_asUTRUnitType("+String($vlElem)+"):"+WS_asUTRUnitType{$vlElem}+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_asUTUnitCategory)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_asUTUnitCategory("+String($vlElem)+"):"+WS_asUTUnitCategory{$vlElem}+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_aiUTSortOrder)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_aiUTSortOrder("+String($vlElem)+"):"+String(WS_aiUTSortOrder{$vlElem})+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_aiUTNoVacant)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_aiUTNoVacant("+String($vlElem)+"):"+String(WS_aiUTNoVacant{$vlElem})+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_asUTSizeCategory)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_asUTSizeCategory("+String($vlElem)+"):"+WS_asUTSizeCategory{$vlElem}+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_arUTMonthlySpecialRate)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_arUTMonthlySpecialRate("+String($vlElem)+"):"+String(WS_arUTMonthlySpecialRate{$vlElem})+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_arUTArea)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_arUTArea("+String($vlElem)+"):"+String(WS_arUTArea{$vlElem})+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_aiUTNoTotal)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_aiUTNoTotal("+String($vlElem)+"):"+String(WS_aiUTNoTotal{$vlElem})+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_arUTUnitTypeLength)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_arUTUnitTypeLength("+String($vlElem)+"):"+String(WS_arUTUnitTypeLength{$vlElem})+Char(13)
End for 
$vlElem:=1
$sizeofarray:=Size of array(WS_arUTUnitTypeWidth)
For ($vlElem;1;$sizeofarray)
$String:=$String+"WS_arUTUnitTypeWidth("+String($vlElem)+"):"+String(WS_arUTUnitTypeWidth{$vlElem})+Char(13)
End for 
WSRecordLog ($String)


ReadOnlyAll 
UnloadAll 

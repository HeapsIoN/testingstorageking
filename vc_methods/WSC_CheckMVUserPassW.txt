//%attributes = {"lang":"en"} comment added and reserved by 4D.
// ----------------------------------------------------
// User name (OS): unknown
// Date and time: 00/00/00 00:00:00
// ----------------------------------------------------
// Method: WSC_CheckMVUserPassW
// Description
//
// This method is used to call a MV and check that the 
// attempted username and login match what is at MV.
// 
// Parameters
// ----------------------------------------------------
TRACE
C_TEXT($0)
C_TEXT($Permissions)//Checks Password from HOFacility
C_TEXT(WS_ORFacilityCode;)
C_TEXT($UserID;$Language)
C_TEXT($2;$PINCode)//$AccessGroup
C_DATE($PWDChangeDate)
C_LONGINT($TCPID;$Error;)
ARRAY TEXT(asNames;0)
ARRAY TEXT(asStaffPins;0)
ARRAY LONGINT(aiUserNo;0)
ARRAY LONGINT(aiTimezone;0)
ARRAY TEXT(asGroupName;0)
ARRAY TEXT(asGroupID;0)
ARRAY TEXT(asUserGroupID;0)
ARRAY TEXT(asGroupUserID;0)
ARRAY BOOLEAN(asGroupCC;0)
ARRAY BOOLEAN(asGroupOverride;0)
ARRAY TEXT(asGroupPerm;0)
ARRAY TEXT(atButtons;0)

C_BOOLEAN(WS_ORSuccess)
C_LONGINT(WS_ORErrorCode)
C_TEXT(WS_ORErrorDescription)

// DAM setting WS_ORSuccess for 10803
WS_ORSuccess:=False

$TCPID:=0
$UserID:=""
$Permissions:=""
$PINCode:=""
$SalesPerson:=False
$ActualName:=""
$PWDChangeDate:=!00-00-00!
WS_ORFacilityCode:=[Facility]FacilityCode
WS_WebServicePassword:=[Facility]ODBCPassword

If (Count parameters>0)
WEB SERVICE SET PARAMETER("WS_ORFacilityCode";WS_ORFacilityCode)
WEB SERVICE SET PARAMETER("WS_Username";$1)
WEB SERVICE SET PARAMETER("WS_Password";$2)
WEB SERVICE SET PARAMETER("WS_WebServicePassword";WS_WebServicePassword)
End if 

$PortPos:=Position(":";[Facility]CentralAddress)
If ($PortPos>0)
$PortString:=Substring([Facility]CentralAddress;$PortPos+1)
Else 
$PortString:="19812"
End if 

$Port:=Num($PortString)
$Error:=IT_SetTimeOut (1)
$Error:=TCP_Open (GetDNS ("MV");$Port;$TCPID;0)

If ($Error=0)
$Error:=TCP_Close ($TCPID)
WEB SERVICE CALL("https://"+GetDNS ("MV")+":"+$PortString+"/4DSOAP/";"Storman#WS_CheckMVUserPassW";"WS_CheckMVUserPassW";"Storman";Web Service dynamic)

If (OK=1)
WEB SERVICE GET RESULT($Permissions;"WS_Permissions")
WEB SERVICE GET RESULT($UserID;"WS_UserID")
WEB SERVICE GET RESULT(asGroupName;"WS_GroupName")
WEB SERVICE GET RESULT(asGroupID;"WS_GroupID")
WEB SERVICE GET RESULT(asUserGroupID;"WS_UserGroupID")
WEB SERVICE GET RESULT(asGroupUserID;"WS_GroupUserID")
WEB SERVICE GET RESULT(asGroupCC;"WS_GroupCC")
WEB SERVICE GET RESULT(asGroupOverride;"WS_GroupOverride")
WEB SERVICE GET RESULT(asGroupPerm;"WS_GroupPerm")
WEB SERVICE GET RESULT(asNames;"WS_Names")
WEB SERVICE GET RESULT(asStaffPins;"WS_StaffPins")
WEB SERVICE GET RESULT(aiUserNo;"WS_UserNo")
WEB SERVICE GET RESULT(aiTimezone;"WS_Timezone")
WEB SERVICE GET RESULT($PWDChangeDate;"WS_PasswordChangeDate")
WEB SERVICE GET RESULT($ActualName;"WS_ActualName")
WEB SERVICE GET RESULT(atButtons;"WS_Buttons")
WEB SERVICE GET RESULT(WS_SalesPerson;"WS_SalesPerson")
WEB SERVICE GET RESULT(WS_ORSuccess;"WS_ORSuccess")
WEB SERVICE GET RESULT(WS_ORErrorCode;"WS_ORErrorCode")
WEB SERVICE GET RESULT(WS_ORErrorDescription;"WS_ORErrorDescription")
WEB SERVICE GET RESULT($Language;"WS_Language";*)// Memory clean-up on the final return value.


QUERY([UserLogins];[UserLogins]Name=$1)

Case of 

: (Records in selection([UserLogins])=0) & (WS_ORSuccess=True)
READ WRITE([UserLogins])
CREATE RECORD([UserLogins])
[UserLogins]Name:=$1
[UserLogins]Password:=$2
[UserLogins]Permissions:=$Permissions
[UserLogins]UserID:=$UserID
[UserLogins]RecordStatus:=0
[UserLogins]PinCode:=$PINCode
[UserLogins]PasswordChangeDate:=$PWDChangeDate
[UserLogins]ActualName:=$ActualName
[UserLogins]SalesPerson:=$SalesPerson
SAVE RECORD([UserLogins])
READ ONLY([UserLogins])
LOAD RECORD([UserLogins])

: (Records in selection([UserLogins])=1) & (WS_ORSuccess=True)
READ WRITE([UserLogins])
LOAD RECORD([UserLogins])
If (Locked([UserLogins]))
AlertMessage ("Cannot update user as record is locked")
End if 
[UserLogins]Password:=$2
[UserLogins]Permissions:=$Permissions
[UserLogins]UserID:=$UserID
[UserLogins]PinCode:=$PINCode
[UserLogins]PasswordChangeDate:=$PWDChangeDate
[UserLogins]ActualName:=$ActualName
[UserLogins]SalesPerson:=$SalesPerson
[UserLogins]Language:=$Language
SAVE RECORD([UserLogins])
READ ONLY([UserLogins])
LOAD RECORD([UserLogins])
Else 
//Do Nothing
End case 

If (([Facility]GateSysType=2) | ([Facility]GateSysType=3) | ([Facility]GateSysType=4) | ([Facility]GateSysType=5) | ([Facility]GateSysType=7) | ([Facility]GateSysType=8) | ([Facility]GateSysType=9)) & ([Facility]StaffPinsHOF=True)
READ WRITE([Facility])
LOAD RECORD([Facility])
QUERY([StaffPINS];[StaffPINS]FacilityCode=<>sFacility)
DELETE SELECTION([StaffPINS])
SAVE RECORD([Facility])
For ($i;1;Size of array(asNames))
CREATE RECORD([StaffPINS])
[StaffPINS]Name:=asNames{$i}
[StaffPINS]PINNumber:=asStaffPins{$i}
[StaffPINS]TimeZoneNo:=aiTimeZone{$i}
[StaffPINS]UserNo:=aiUserNo{$i}
[StaffPINS]FacilityCode:=<>sFacility
SAVE RECORD([StaffPINS])
End for 
SAVE RECORD([Facility])
READ ONLY([Facility])
LOAD RECORD([Facility])
QUERY([StaffPINS];[StaffPINS]FacilityCode=<>sFacility)
For ($k;1;Records in selection([StaffPINS]))
GateQueue ("CreateUser";[StaffPINS]UserNo;[StaffPINS]PINNumber;0;Substring([StaffPINS]Name;1;16);Current date;[StaffPINS]TimeZoneNo;0;0;0;0;String([StaffPINS]UserNo);False)
NEXT RECORD([StaffPINS])
End for 
End if 
READ WRITE([Groups])
LOAD RECORD([Groups])
ALL RECORDS([Groups])
DELETE SELECTION([Groups])
For ($i;1;Size of array(asGroupName))
QUERY([Groups];[Groups]GroupID=asGroupID{$i})
If (Records in selection([Groups])<1)
CREATE RECORD([Groups])
End if 
[Groups]Name:=asGroupName{$i}
[Groups]GroupID:=asGroupID{$i}
[Groups]CallCentre:=asGroupCC{$i}
[Groups]Override:=asGroupOverride{$i}
[Groups]Permissions:=asGroupPerm{$i}
[Groups]Buttons:=atButtons{$i}
SAVE RECORD([Groups])
End for 
READ ONLY([Groups])
UNLOAD RECORD([Groups])
READ WRITE([UserGroup])
LOAD RECORD([UserGroup])
ALL RECORDS([UserGroup])
DELETE SELECTION([UserGroup])
For ($i;1;Size of array(asUserGroupID))
CREATE RECORD([UserGroup])
[UserGroup]GroupID:=asUserGroupID{$i}
[UserGroup]UserID:=asGroupUserID{$i}
SAVE RECORD([UserGroup])
End for 
READ ONLY([UserGroup])
UNLOAD RECORD([UserGroup])

Else 
SyncRecordLog ("Could not contact MV for userlogin "+String($Error))
QUERY([UserLogins];[UserLogins]Name=$1)
$2:=[UserLogins]Password
WS_ORSuccess:=True
End if 

Else 
SyncRecordLog ("Could not contact MV for userlogin "+String($Error))
QUERY([UserLogins];[UserLogins]Name=$1)
$2:=[UserLogins]Password
WS_ORSuccess:=True
End if 

$Error:=IT_SetTimeOut (30)

If (WS_ORSuccess=True)
$0:=$2
QUERY([UserLogins];[UserLogins]Name=$1)//DAM 18/05/16
Else 
QUERY([UserLogins];[UserLogins]Name=$1)
If (Records in selection([UserLogins])>0)
READ WRITE([UserLogins])
DELETE RECORD([UserLogins])
READ ONLY([UserLogins])
End if 
AlertMessage (Get localized string("This particular user-login does not exist, or does not have permission to login at this facility. Please contact your head office facility for further details."))
End if 



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Johnno - Original Method FB10041////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//C_TEXT($0)
//C_TEXT($Password;$Permissions)  //Checks Password from HOFacility
//C_TEXT($FacilityCode)
//C_TEXT($UserID;$Language)
//C_TEXT($2;$PINCode)  //$AccessGroup
//C_BOOLEAN($Facility;$Pass)
//C_DATE($PWDChangeDate)
//  //C_LONGINT($AccessLevel)
//C_LONGINT($TCPID;$Error)
//ARRAY TEXT(asNames;0)
//ARRAY TEXT(asStaffPins;0)
//ARRAY LONGINT(aiUserNo;0)
//ARRAY LONGINT(aiTimezone;0)
//ARRAY TEXT(asGroupName;0)
//ARRAY TEXT(asGroupID;0)
//ARRAY TEXT(asUserGroupID;0)
//ARRAY TEXT(asGroupUserID;0)
//ARRAY BOOLEAN(asGroupCC;0)
//ARRAY BOOLEAN(asGroupOverride;0)
//ARRAY TEXT(asGroupPerm;0)
//ARRAY TEXT(atButtons;0)
//$TCPID:=0
//$Password:=""
//$Facility:=False
//$Pass:=False
//$UserID:=""
//$Permissions:=""
//$PINCode:=""
//$SalesPerson:=False
//$ActualName:=""
//$PWDChangeDate:=!00-00-00!
//  //$AccessLevel:=0
//  //$AccessGroup:=""
//$FacilityCode:=[Facility]FacilityCode
//If (Count parameters>0)
//WEB SERVICE SET PARAMETER("WS_FacilityCode";$FacilityCode)
//WEB SERVICE SET PARAMETER("WS_Username";$1)
//End if 
//$PortPos:=Position(":";[Facility]CentralAddress)
//If ($PortPos>0)
//$PortString:=Substring([Facility]CentralAddress;$PortPos+1)
//Else 
//$PortString:="19812"
//End if 
//$Port:=Num($PortString)
//$Error:=IT_SetTimeOut (1)
//$Error:=TCP_Open (GetDNS ("MV");$Port;$TCPID;0)
//If ($Error=0)
//$Error:=TCP_Close ($TCPID)
//WEB SERVICE CALL("http://"+GetDNS ("MV")+":"+$PortString+"/4DSOAP/";"Storman#WS_CheckMVUserPassW";"WS_CheckMVUserPassW";"Storman";Web Service dynamic)
//If (OK=1)
//WEB SERVICE GET RESULT($Password;"WS_Password")
//WEB SERVICE GET RESULT($Permissions;"WS_Permissions")
//WEB SERVICE GET RESULT($UserID;"WS_UserID")
//  //GET WEB SERVICE RESULT($AccessLevel;"WS_AccessLevel")
//  //GET WEB SERVICE RESULT($AccessGroup;"WS_AccessGroup")
//WEB SERVICE GET RESULT(asGroupName;"WS_GroupName")
//WEB SERVICE GET RESULT(asGroupID;"WS_GroupID")
//WEB SERVICE GET RESULT(asUserGroupID;"WS_UserGroupID")
//WEB SERVICE GET RESULT(asGroupUserID;"WS_GroupUserID")
//WEB SERVICE GET RESULT(asGroupCC;"WS_GroupCC")
//WEB SERVICE GET RESULT(asGroupOverride;"WS_GroupOverride")
//WEB SERVICE GET RESULT(asGroupPerm;"WS_GroupPerm")
//WEB SERVICE GET RESULT($Facility;"WS_FacilityOK")
//WEB SERVICE GET RESULT(asNames;"WS_Names")
//WEB SERVICE GET RESULT(asStaffPins;"WS_StaffPins")
//WEB SERVICE GET RESULT(aiUserNo;"WS_UserNo")
//WEB SERVICE GET RESULT(aiTimezone;"WS_Timezone")
//WEB SERVICE GET RESULT($PWDChangeDate;"WS_PasswordChangeDate")
//WEB SERVICE GET RESULT($ActualName;"WS_ActualName")
//WEB SERVICE GET RESULT(atButtons;"WS_Buttons")
//WEB SERVICE GET RESULT($SalesPerson;"WS_SalesPerson")
//WEB SERVICE GET RESULT($Language;"WS_Language";*)  // Memory clean-up on the final return value.


//$Password:=EncryptIt2 ($Password;False)
//If ($Facility=True)
//$Pass:=True
//End if 

//QUERY([UserLogins];[UserLogins]Name=$1)
//Case of 
//: (Records in selection([UserLogins])=0) & ($Pass=True)
//READ WRITE([UserLogins])
//CREATE RECORD([UserLogins])
//[UserLogins]Name:=$1
//[UserLogins]Password:=$Password
//[UserLogins]Permissions:=$Permissions
//[UserLogins]UserID:=$UserID
//  //[UserLogins]AccessGroup:=$AccessGroup
//  //[UserLogins]AccessLevel:=$AccessLevel
//[UserLogins]RecordStatus:=0
//[UserLogins]PinCode:=$PINCode
//[UserLogins]PasswordChangeDate:=$PWDChangeDate
//[UserLogins]ActualName:=$ActualName
//[UserLogins]SalesPerson:=$SalesPerson
//SAVE RECORD([UserLogins])
//READ ONLY([UserLogins])
//LOAD RECORD([UserLogins])
//: (Records in selection([UserLogins])=1) & ($Pass=True)
//READ WRITE([UserLogins])
//LOAD RECORD([UserLogins])
//If (Locked([UserLogins]))
//AlertMessage ("Cannot update user as record is locked")
//End if 
//[UserLogins]Password:=$Password
//[UserLogins]Permissions:=$Permissions
//[UserLogins]UserID:=$UserID
//[UserLogins]PinCode:=$PINCode
//  //[UserLogins]AccessGroup:=$AccessGroup
//  //[UserLogins]AccessLevel:=$AccessLevel
//[UserLogins]PasswordChangeDate:=$PWDChangeDate
//[UserLogins]ActualName:=$ActualName
//[UserLogins]SalesPerson:=$SalesPerson
//[UserLogins]Language:=$Language
//SAVE RECORD([UserLogins])
//READ ONLY([UserLogins])
//LOAD RECORD([UserLogins])
//Else 
//  //Do Nothing
//End case 

//If (([Facility]GateSysType=2) | ([Facility]GateSysType=3) | ([Facility]GateSysType=4) | ([Facility]GateSysType=5) | ([Facility]GateSysType=7) | ([Facility]GateSysType=8) | ([Facility]GateSysType=9)) & ([Facility]StaffPinsHOF=True)
//READ WRITE([Facility])
//LOAD RECORD([Facility])
//QUERY([StaffPINS];[StaffPINS]FacilityCode=<>sFacility)
//DELETE SELECTION([StaffPINS])
//SAVE RECORD([Facility])
//For ($i;1;Size of array(asNames))
//CREATE RECORD([StaffPINS])
//[StaffPINS]Name:=asNames{$i}
//[StaffPINS]PINNumber:=asStaffPins{$i}
//[StaffPINS]TimeZoneNo:=aiTimeZone{$i}
//[StaffPINS]UserNo:=aiUserNo{$i}
//[StaffPINS]FacilityCode:=<>sFacility
//SAVE RECORD([StaffPINS])
//End for 
//SAVE RECORD([Facility])
//READ ONLY([Facility])
//LOAD RECORD([Facility])
//QUERY([StaffPINS];[StaffPINS]FacilityCode=<>sFacility)
//For ($k;1;Records in selection([StaffPINS]))
//GateQueue ("CreateUser";[StaffPINS]UserNo;[StaffPINS]PINNumber;0;Substring([StaffPINS]Name;1;16);Current date;[StaffPINS]TimeZoneNo;0;0;0;0;String([StaffPINS]UserNo);False)
//NEXT RECORD([StaffPINS])
//End for 
//End if 
//READ WRITE([Groups])
//LOAD RECORD([Groups])
//ALL RECORDS([Groups])
//DELETE SELECTION([Groups])
//For ($i;1;Size of array(asGroupName))
//QUERY([Groups];[Groups]GroupID=asGroupID{$i})
//If (Records in selection([Groups])<1)
//CREATE RECORD([Groups])
//End if 
//[Groups]Name:=asGroupName{$i}
//[Groups]GroupID:=asGroupID{$i}
//[Groups]CallCentre:=asGroupCC{$i}
//[Groups]Override:=asGroupOverride{$i}
//[Groups]Permissions:=asGroupPerm{$i}
//[Groups]Buttons:=atButtons{$i}
//SAVE RECORD([Groups])
//End for 
//READ ONLY([Groups])
//UNLOAD RECORD([Groups])
//READ WRITE([UserGroup])
//LOAD RECORD([UserGroup])
//ALL RECORDS([UserGroup])
//DELETE SELECTION([UserGroup])
//For ($i;1;Size of array(asUserGroupID))
//CREATE RECORD([UserGroup])
//[UserGroup]GroupID:=asUserGroupID{$i}
//[UserGroup]UserID:=asGroupUserID{$i}
//SAVE RECORD([UserGroup])
//End for 
//READ ONLY([UserGroup])
//UNLOAD RECORD([UserGroup])

//Else 
//SyncRecordLog ("Could not contact MV for userlogin "+String($Error))
//QUERY([UserLogins];[UserLogins]Name=$1)
//$Password:=[UserLogins]Password
//$Facility:=True
//End if 

//Else 
//SyncRecordLog ("Could not contact MV for userlogin "+String($Error))
//QUERY([UserLogins];[UserLogins]Name=$1)
//$Password:=[UserLogins]Password
//$Facility:=True
//End if 
//$Error:=IT_SetTimeOut (30)
//If ($Facility=True)
//$0:=$Password
//Else 
//QUERY([UserLogins];[UserLogins]Name=$1)
//If (Records in selection([UserLogins])>0)
//READ WRITE([UserLogins])
//DELETE RECORD([UserLogins])
//READ ONLY([UserLogins])
//End if 
//AlertMessage (Get localized string("This particular user-login does not exist, or does not have permission to login at this facility. Please contact your head office facility for further details."))
//End if 

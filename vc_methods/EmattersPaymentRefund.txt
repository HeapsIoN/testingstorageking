//%attributes = {"lang":"en"} comment added and reserved by 4D.
//--------------------------------------
//eMatters' Process a payment and Rrfund
//--------------------------------------
C_TEXT($valRootRef;$valElemRef;$response;$Content;$valueElmRes;$URLHost;$strResult;$PROCESS_VAR_UID;$PROCESS_VAR_Amount;$PROCESS_VAR_AuthCode;$PROCESS_VAR_CardType;$PROCESS_VAR_TrxnReference;$PROCESS_VAR_emattersMainID)
C_TEXT($0)
C_TEXT($1)//readers -mandatory
C_TEXT($2)//password -mandatory
C_TEXT($3)//BinIPCheck
C_TEXT($4)//Name -mandatory
C_TEXT($5)//Email
C_TEXT($6)//CreditCardHolderName -mandatory
C_TEXT($7)//CreditCardNumber -mandatory
//C_LONGINT($8)  //CreditCardExpiryMonth -mandatory
//C_LONGINT($9)  //CreditCardExpiryYear -mandatory
C_TEXT($8)//CreditCardExpiryMonth -mandatory
C_TEXT($9)//CreditCardExpiryYear -mandatory
//C_LONGINT($10)  //CVV
C_TEXT($10)//CVV
C_REAL($11)//FinalPrice -mandatory
C_TEXT($12)//IPAddress
C_TEXT($13)//OnBill
C_REAL($14)//OnBillAmount
C_TEXT($15)//OnBillAutoUpdate
C_TEXT($16)//OnBillDate
C_REAL($17)//OnBillFrequency
C_REAL($18)//OnBillQty
C_TEXT($19)//OnBillReturnURL
C_TEXT($20)//OnBillType
C_TEXT($21)//SubMerchant
C_TEXT($22)//UID -mandatory
C_REAL($23)//Category
C_TEXT($24)//Action
C_TEXT($VAR_AuthCode;$VAR_emattersMainID)


$URLHost:="https://merchant.ematters.com.au/cmaonline.nsf/XML?OpenAgent"
$valRootRef:=DOM Create XML Ref("ematters")
DOM SET XML DECLARATION($valRootRef;"ISO-8859-1")

$valxmlPath:="/ematters/readers"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$1)

$valxmlPath:="/ematters/password"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$2)

$valxmlPath:="/ematters/Name"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;Replace string($4;"&";"and"))
If ($5#"")
$valxmlPath:="/ematters/Email"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$5)
End if 
$valxmlPath:="/ematters/CreditCardHolderName"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;Replace string($6;"&";"and"))

$valxmlPath:="/ematters/CreditCardNumber"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$7)

$valxmlPath:="/ematters/CreditCardExpiryMonth"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
If (Length($8)<2)
// add 0 befor 1~9
DOM SET XML ELEMENT VALUE($valElemRef;"0"+$8)
Else 
DOM SET XML ELEMENT VALUE($valElemRef;$8)
End if 

$valxmlPath:="/ematters/CreditCardExpiryYear"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$9)
If ($10#"")
$valxmlPath:="/ematters/CVV"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$10)
End if 
$valxmlPath:="/ematters/UID"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$22)
If ($23#0)
$valxmlPath:="/ematters/Category"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$23)
End if 
If ($12#"")
$valxmlPath:="/ematters/IPAddress"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$12)
End if 
$valxmlPath:="/ematters/FinalPrice"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$11)
If ($24#"")
$valxmlPath:="/ematters/Action"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$24)
End if 
If ($3#"")
$valxmlPath:="/ematters/BinIPCheck"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$3)
End if 
If ($13#"")
$valxmlPath:="/ematters/OnBill"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$13)
End if 
If ($14#0)
$valxmlPath:="/ematters/OnBillAmount"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$14)
End if 
If ($15#"")
$valxmlPath:="/ematters/OnBillAutoUpdate"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$15)
End if 
If ($16#"")
$valxmlPath:="/ematters/OnBillDate"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$16)
End if 
If ($17#0)
$valxmlPath:="/ematters/OnBillFrequency"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$17)
End if 
If ($18#0)
$valxmlPath:="/ematters/OnBillQty"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$18)
End if 
If ($19#"")
$valxmlPath:="/ematters/OnBillReturnURL"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$19)
End if 
If ($20#"")
$valxmlPath:="/ematters/OnBillType"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$20)
End if 
If ($21#"")
$valxmlPath:="/ematters/SubMerchant"
$valElemRef:=DOM Create XML element($valRootRef;$valxmlPath)
DOM SET XML ELEMENT VALUE($valElemRef;$21)
End if 


DOM EXPORT TO VAR($valRootRef;$Content)
//DOM EXPORT TO FILE($valRootRef;"Y:\\eMatters_Request1.xml")
//ALERT($Content)  // check point , delete this code at the end
MaskCCLog ($Content;"eMatters")
//SyncRecordLog ($Content)
// HTTP Request , send request xml to eMatters' server
$httpStatus_l:=HTTP Request(HTTP POST method;$URLHost;$Content;$response)

//ALERT($response)  // check point , delete this code at the end


If ($httpStatus_l=200)
$xml_Struct_Ref:=DOM Parse XML variable($response)
SyncRecordLog ($response)
//DOM EXPORT TO FILE($xml_Struct_Ref;"Y:\\eMatters_Response1.xml")
$documentRef:=DOM Get XML document ref($xml_Struct_Ref)

$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersRcode")
DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
$strResult:=$valueElmRes
$0:="Ok"
Case of // Checking emattersRcode
: ($strResult="01")
vCCText:="Transaction declined"
AlertMessage ("Transaction declined")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 01 > Transaction declined")
: ($strResult="02")
vCCText:="Amount too small"
AlertMessage ("Amount too small")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 02 > Amount too small")
: ($strResult="03")
vCCText:="Amount too large"
AlertMessage ("Amount too large")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 03 > Amount too large")
: ($strResult="04")
vCCText:="Stolen card"
AlertMessage ("Stolen card")//Card has been reported lost, stolen or blocked 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 04 > Card has been reported lost, stolen or blocked")
: ($strResult="06")
vCCText:="Declined - no prior authorization number"
AlertMessage ("Declined - no prior authorization number")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 06 > Declined - no prior authorization number")
: ($strResult="07")
vCCText:="Card declined"
AlertMessage ("Card declined")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 07 > Card declined")
: ($strResult="08")
//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersUID")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//PROCESS_VAR_UID:=$valueElmRes
//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersAmount")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//PROCESS_VAR_Amount:=$valueElmRes
$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersAuthCode")
DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
$VAR_AuthCode:=$valueElmRes
//If ($24="Process")  //this element is only for Process action
//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersCardType")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//End if 
//PROCESS_VAR_CardType:=$valueElmRes
//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersTrxnReference")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//PROCESS_VAR_TrxnReference:=$valueElmRes
$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersMainID")
DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
$VAR_emattersMainID:=$valueElmRes
AlertMessage ("Transaction approved")//Transaction has been approved and will be settled the following business day
SyncRecordLog ("EmattersPaymentRefund Method, Transaction approved, code: 08 > Transaction has been approved and will be settled the following business day")
: ($strResult="09")
vCCText:="Unable to refund"
AlertMessage ("Unable to refund")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 09 > Unable to refund")
: ($strResult="10")
vCCText:="Bank server busy"
AlertMessage ("Bank server busy")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 10 > Bank server busy")
: ($strResult="11")
vCCText:="Daily trans exceeded"
AlertMessage ("Daily trans exceeded")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 11 > Daily trans exceeded")
: ($strResult="91")
vCCText:="Issuer not available"
AlertMessage ("Issuer not available")//The cardholder's bank is currently offline.  Try again later 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 91 > The cardholder's bank is currently offline.  Try again later")
: ($strResult="99")
vCCText:="Failure in bank initialising"
AlertMessage ("Failure in bank initialising")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 99 > Failure in bank initialising")
: ($strResult="702")
vCCText:="Transaction still underway"
AlertMessage ("Transaction still underway")//UID has been received by eMatters and is currently with the bank.  This error is returned when a second transaction with the same UID is received before the first one is completed 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 702 > UID has been received by eMatters and is currently with the bank.  This error is returned when a second transaction with the same UID is received before the first one is completed")
: ($strResult="707")
vCCText:="3SO Activated - too many failed attempts"
AlertMessage ("3SO Activated - too many failed attempts")//After three declined transactions, the UID is blocked for 24 hours.  This reduces fraudulent transactions from reaching the merchant's bank account 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 707 > After three declined transactions, the UID is blocked for 24 hours.  This reduces fraudulent transactions from reaching the merchant's bank account")
: ($strResult="708")
vCCText:="Non-unique UID - already accepted"
AlertMessage ("Non-unique UID - already accepted")//Once we have approved a UID it is then blocked for 24 hours, stopping duplicate transactions
SyncRecordLog ("EmattersPaymentRefund Method, error code: 708 > Once we have approved a UID it is then blocked for 24 hours, stopping duplicate transactions")
: ($strResult="710")
vCCText:="IGP Activated - transaction from high risk country"
AlertMessage ("IGP Activated - transaction from high risk country")//We block certain high risk countries based on our knowledge of global regions and fraud 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 710 > We block certain high risk countries based on our knowledge of global regions and fraud ")
: ($strResult="712")
vCCText:="Fraud Screen Block - IP and bank not matching"
AlertMessage ("Fraud Screen Block - IP and bank not matching")//The country of origin of the IP address does not match the country of origin of the credit card
SyncRecordLog ("EmattersPaymentRefund Method, error code: 712 > The country of origin of the IP address does not match the country of origin of the credit card")
: ($strResult="714")
vCCText:="Card from outside acceptable country range"
AlertMessage ("Card from outside acceptable country range")//The merchant's account is limited to only accept AU, NZ or AU & NZ cards.  Cards from other countries are rejected 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 714 > The merchant's account is limited to only accept AU, NZ or AU & NZ cards.  Cards from other countries are rejected")
: ($strResult="715")
vCCText:="Unknown BIN range"
AlertMessage ("Unknown BIN range")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 715 > Unknown BIN range")
: ($strResult="810")
vCCText:="Invalid purchase amount"
AlertMessage ("Invalid purchase amount")//The amount entered by the purchaser is incorrect.  It must always be greater than $0 and less than $99,999 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 810 > The amount entered by the purchaser is incorrect.  It must always be greater than $0 and less than $99,999")
: ($strResult="812")
vCCText:="Unacceptable Card Number"
AlertMessage ("Unacceptable Card Number")//The card number provided by the purchaser fails our most basic tests 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 812 > The card number provided by the purchaser fails our most basic tests")
: ($strResult="813")
vCCText:="Invalid Expiry Date Format"
AlertMessage ("Invalid Expiry Date Format")//The expiry dates provided by the purchaser fails our most basic tests
SyncRecordLog ("EmattersPaymentRefund Method, error code: 813 > The expiry dates provided by the purchaser fails our most basic tests")
: ($strResult="816")
vCCText:="Card Expired"
AlertMessage ("Card Expired")//The expiry dates provided by the purchaser have already expired 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 816 > The expiry dates provided by the purchaser have already expired")
: ($strResult="822")
vCCText:="Invalid merchant number"
AlertMessage ("Invalid merchant number")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 822 > Invalid merchant number")
: ($strResult="830")
vCCText:="Database update failure"
AlertMessage ("Database update failure")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 830 > Database update failure")
: ($strResult="831")
vCCText:="Bank database timed out"
AlertMessage ("Bank database timed out")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 831 > Bank database timed out")
: ($strResult="833")
vCCText:="Invalid currency"
AlertMessage ("Invalid currency")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 833 > Invalid currency")
: ($strResult="840")
vCCText:="Invalid CVV"
AlertMessage ("Invalid CVV")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 840 > Invalid CVV")
: ($strResult="844")
vCCText:="Bank system under maintenance"
AlertMessage ("Bank system under maintenance")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 844 > Bank system under maintenance")
: ($strResult="845")
vCCText:="Bank system under maintenance"
AlertMessage ("Bank system under maintenance")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 845 > Bank system under maintenance")
: ($strResult="912")
vCCText:="Blank Newmerchantid"
AlertMessage ("Blank Newmerchantid")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 912 > Blank Newmerchantid")
: ($strResult="913")
vCCText:="Unsupported transaction"
AlertMessage ("Unsupported transaction")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 913 > Unsupported transaction")
: ($strResult="921")
vCCText:="BlackList invoked"
AlertMessage ("BlackList invoked")//The details presented in the transaction match one of the entries you have created in our BlackList database.  The transaction is considered high risk 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 921 > The details presented in the transaction match one of the entries you have created in our BlackList database.  The transaction is considered high risk")
: ($strResult="953")
vCCText:="Link to this bank is currently unavailable"
AlertMessage ("Link to this bank is currently unavailable")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 953 > Link to this bank is currently unavailable")
: ($strResult="990")
vCCText:="Link to bank has failed"
AlertMessage ("Link to bank has failed")
SyncRecordLog ("EmattersPaymentRefund Method, error code: 990 > Link to bank has failed")
: ($strResult="999")
vCCText:="Card number too short"
AlertMessage ("Card number too short")//The card number supplied is missing numbers and is too short 
SyncRecordLog ("EmattersPaymentRefund Method, error code: 999 > The card number supplied is missing numbers and is too short")
: ($strResult="xx")
vCCText:="Transaction in progress"
AlertMessage ("Transaction in progress")//The transaction is still at the bank and we are waiting for a response.  Contact your eMatters consultant
SyncRecordLog ("EmattersPaymentRefund Method, error code: xx > The transaction is still at the bank and we are waiting for a response.  Contact your eMatters consultant")
Else 
vCCText:="Unexpected erroe occure! The value of the error is: \""+$strResult+"\""
AlertMessage ("An unexpected error occured! Please contact Storman Support. The value of the error is: \""+$strResult+"\"")
$varErrStr:=""
$varErrStr:=$varErrStr+"EmattersPaymentRefund Method, Unexpected erroe occure! The value of the error is:"
$varErrStr:=$varErrStr+$strResult
SyncRecordLog ($varErrStr)
End case 

DOM CLOSE XML($valRootRef)//Close Request XML
DOM CLOSE XML($xml_Struct_Ref)//Close Response XML

If ($strResult="08")
$0:="Ok"
[Trxs]CCAuthNo:=$VAR_AuthCode
[Trxs]CCTransID:=$VAR_emattersMainID
SAVE RECORD([Trxs])///--9093
Else 
$0:="ERR"+$strResult
End if 

Else 
$0:="ERRHTTP"+String($httpStatus_l)
$varErrStr:=""
$varErrStr:=$varErrStr+"EmattersPaymentRefund Method, HTTP error code:"
$varErrStr:=$varErrStr+String($httpStatus_l)
SyncRecordLog ($varErrStr)
End if 

//If ($httpStatus_l=200)

//$xml_Struct_Ref:=DOM Parse XML variable($response)
//$documentRef:=DOM Get XML document ref($xml_Struct_Ref)

//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersRcode")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//$0:=$valueElmRes  // return result of method
//If ($0="08")

//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersUID")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//PROCESS_VAR_UID:=$valueElmRes
//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersAmount")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//PROCESS_VAR_Amount:=$valueElmRes
//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersAuthCode")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//PROCESS_VAR_AuthCode:=$valueElmRes
//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersCardType")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//PROCESS_VAR_CardType:=$valueElmRes
//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersTrxnReference")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//PROCESS_VAR_TrxnReference:=$valueElmRes
//$valFound:=DOM Find XML element($documentRef;"emattersResponse/emattersMainID")
//DOM GET XML ELEMENT VALUE($valFound;$valueElmRes)
//PROCESS_VAR_emattersMainID:=$valueElmRes
//End if 
//DOM CLOSE XML($valRootRef)  //Close Request XML
//DOM CLOSE XML($xml_Struct_Ref)  //Close Response XML
//Else 
//$0:="Bad"+String($httpStatus_l)
//End if 




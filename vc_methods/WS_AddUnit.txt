//%attributes = {"publishedSoap":true,"publishedWsdl":true,"lang":"en"} comment added and reserved by 4D.

// ----------------------------------------------------
// User name (OS): robert.richardson
// Date and time: 22/04/10, 09:45:47
// ----------------------------------------------------
// Method: WS_AddUnit
// Description
// This will add a unit for a particular unit type to an agreement
//
// Parameters
// ----------------------------------------------------
// 

SOAP DECLARATION(WS_UTRUnitType;Is string var;SOAP input;"WS_UTRUnitType")
SOAP DECLARATION(WS_RAgreeNo;Is string var;SOAP input;"WS_RAgreeNo")
SOAP DECLARATION(WS_ProrataCharge;Is Boolean;SOAP input;"WS_ProrataCharge")
SOAP DECLARATION(WS_ToClean;Is Boolean;SOAP input;"WS_ToClean")
SOAP DECLARATION(WS_MoveInDate;Is date;SOAP input;"WS_MoveInDate")
SOAP DECLARATION(WS_BillingPlanSwitch;Is Boolean;SOAP input;"WS_BillingPlanSwitch")
SOAP DECLARATION(WS_DepositCharge;Is Boolean;SOAP input;"WS_DepositCharge")
SOAP DECLARATION(WS_RegularRent;Is real;SOAP input)
SOAP DECLARATION(WS_NewRent;Is real;SOAP input)
SOAP DECLARATION(WS_NewRentFrom;Is date;SOAP input)
SOAP DECLARATION(WS_InsureValue;Is real;SOAP input)
SOAP DECLARATION(WS_InsureCert;Is text;SOAP input)
SOAP DECLARATION(WS_UnitNo;Is text;SOAP input)
SOAP DECLARATION(WS_WebServicePassword;Is text;SOAP input)
SOAP DECLARATION(WS_stDigAgmtID;Is string var;SOAP input;"WS_stDigAgmtID")
SOAP DECLARATION(WS_inDigAgmtID;Is string var;SOAP input;"WS_inDigAgmtID")

//WS_OLD=SOAP DECLARATION(WS_Edit;Is Boolean;SOAP Output;"WS_Edit")
SOAP DECLARATION(WS_CustomerID;Is string var;SOAP output;"WS_CustomerID")
SOAP DECLARATION(WS_ORSuccess;Is Boolean;SOAP output)
SOAP DECLARATION(WS_ORErrorCode;Is integer;SOAP output)
SOAP DECLARATION(WS_ORErrorDescription;Is string var;SOAP output)

//Clear Variables before running method.
WS_ORSuccess:=True
WS_ORErrorCode:=0
WS_ORErrorDescription:=""

$String:="Start WS_AddUnit"+Char(13)
$String:=$String+"WS_UTRUnitType: "+WS_UTRUnitType+Char(13)
$String:=$String+"WS_RAgreeNo: "+WS_RAgreeNo+Char(13)
$String:=$String+"WS_ProrataCharge: "+String(WS_ProrataCharge)+Char(13)
$String:=$String+"WS_ToClean: "+String(WS_ToClean)+Char(13)
$String:=$String+"WS_MoveInDate: "+String(WS_MoveInDate)+Char(13)
$String:=$String+"WS_BillingPlanSwitch: "+String(WS_BillingPlanSwitch)+Char(13)
$String:=$String+"WS_DepositCharge: "+String(WS_DepositCharge)+Char(13)
C_TEXT($pass)
$pass:=WS_WebServicePassword
$pass:=Replace string($pass;Substring($pass;1;Length($pass)-2);"X"*(Length($pass)-2))
$String:=$String+"WS_WebServicePassword: "+$pass+Char(13)
$String:=$String+"WS_RegularRent: "+String(WS_RegularRent)+Char(13)
$String:=$String+"WS_NewRent: "+String(WS_NewRent)+Char(13)
$String:=$String+"WS_NewRentFrom: "+String(WS_NewRentFrom)+Char(13)
$String:=$String+"WS_InsureValue: "+String(WS_InsureValue)+Char(13)
$String:=$String+"WS_InsureCert: "+WS_InsureCert+Char(13)
$String:=$String+"WS_UnitNo: "+WS_UnitNo+Char(13)
$String:=$String+"WS_stDigAgmtID: "+WS_stDigAgmtID+Char(13)
$String:=$String+"WS_inDigAgmtID: "+WS_inDigAgmtID+Char(13)
WSRecordLog ($String)


READ WRITE([Agreement])
READ WRITE([OtherChgs])
READ WRITE([Unit])
READ WRITE([Trxs])
READ WRITE([Customer])

LOAD RECORD([Agreement])
LOAD RECORD([Unit])
LOAD RECORD([Trxs])
LOAD RECORD([Customer])

WS_CustomerID:=""
bAdd:=0
bAll:=0
asShowHistory:=0
viMatch:=-1
vInsureCertNo:=""

QUERY([Facility];[Facility]FacilityCode=Substring(WS_RAgreeNo;1;5))

If (WS_WebServicePassword=[Facility]ODBCPassword) & ([Facility]ODBCPassword#"")

QUERY([Agreement];[Agreement]RAgreeNo=WS_RAgreeNo;*)
QUERY([Agreement]; & ;[Agreement]ActiveAgreemt=True)

If (Records in selection([Agreement])=1)
QUERY([Unit];[Unit]Status="Vacant";*)
If (WS_UnitNo#"")
QUERY([Unit]; & ;[Unit]RUnitNo=WS_UnitNo;*)
End if 
QUERY([Unit]; & ;[Unit]UnitTypeCode=WS_UTRUnitType)

If (Records in selection([Unit])>0)
FIRST RECORD([Unit])
Repeat 
$Locked:=Locked([Unit])
If ($Locked=True) | ((WS_MoveInDate<=[Unit]MoveOut) | (([Unit]MoveOut=!00-00-00!) & ([Unit]MoveIn#!00-00-00!)))
NEXT RECORD([Unit])
End if 
//johnnoUntil (($Locked=False) & ((WS_MoveInDate<=[Unit]MoveOut) | ([Unit]MoveOut=!00/00/0000!))) | ([Unit]RUnitNo="")
Until (($Locked=False) & ((WS_MoveInDate>=[Unit]MoveOut) | (([Unit]MoveOut=!00-00-00!) & ([Unit]MoveIn=!00-00-00!)))) | ([Unit]RUnitNo="")
If (WS_MoveInDate>[Agreement]MoveIn) & (WS_MoveInDate<=(Current date+[Facility]FutureMoveIns)) & ([Unit]RUnitNo>"")
SelectUnitA (True;True;WS_ProrataCharge;WS_MoveInDate;WS_BillingPlanSwitch;WS_DepositCharge;WS_RegularRent;0;WS_stDigAgmtID;WS_inDigAgmtID)
QUERY([Unit];[Unit]RUnitNo=WS_UnitNo)
[Unit]NewRentAmt:=WS_NewRent
[Unit]WeeklyNewRentAmt:=WS_NewRent
[Unit]DailyNewRent:=WS_NewRent
[Unit]IncreaseFrom:=WS_NewRentFrom
If (WS_NewRentFrom#!00-00-00!) & (String(WS_NewRentFrom)#"00/00/00")
[Agreement]NewRentFrom:=[Unit]IncreaseFrom
End if 
[Unit]InsureValue:=WS_InsureValue
[Unit]InsureCertNo:=WS_InsureCert
[Agreement]InsureValue:=[Agreement]InsureValue+[Unit]InsureValue
InsuranceCalc (True;False;True)
SAVE RECORD([Unit])
SAVE RECORD([Agreement])
WS_CustomerID:=[Agreement]CustomerCode
WS_ORSuccess:=True
WS_ORErrorCode:=0
WS_ORErrorDescription:=""
//WS_ORErrorDescription:="Unit successfully added to Agreement in database Storman."
Else 
//WS_OLD=WS_Edit:=False
WS_ORSuccess:=False
WS_ORErrorCode:=1024
WS_ORErrorDescription:="Invalid Move In date."
End if 
Else 
QUERY([Unit];[Unit]Status="ToClean";*)
If (WS_UnitNo#"")
QUERY([Unit]; & ;[Unit]RUnitNo=WS_UnitNo;*)
End if 
QUERY([Unit]; & ;[Unit]UnitTypeCode=WS_UTRUnitType)
If (WS_ToClean=True) & (Records in selection([Unit])>0)
FIRST RECORD([Unit])
Repeat 
$Locked:=Locked([Unit])
If ($Locked=True) | ((WS_MoveInDate<=[Unit]MoveOut) | ([Unit]MoveOut=!00-00-00!))
NEXT RECORD([Unit])
End if 
Until (($Locked=False) & ((WS_MoveInDate<=[Unit]MoveOut) | ([Unit]MoveOut=!00-00-00!))) | ([Unit]RUnitNo="")
If (WS_MoveInDate>[Agreement]MoveIn) & (WS_MoveInDate<=(Current date+[Facility]FutureMoveIns)) & ([Unit]RUnitNo>"")
SelectUnitA (True;True;WS_ProrataCharge;WS_MoveInDate;WS_BillingPlanSwitch;WS_DepositCharge;WS_RegularRent;0;WS_stDigAgmtID;WS_inDigAgmtID)
QUERY([Unit];[Unit]RUnitNo=WS_UnitNo)
[Unit]NewRentAmt:=WS_NewRent
[Unit]WeeklyNewRentAmt:=WS_NewRent
[Unit]DailyNewRent:=WS_NewRent
[Unit]IncreaseFrom:=WS_NewRentFrom
If (WS_NewRentFrom#!00-00-00!) & (String(WS_NewRentFrom)#"00/00/00")
[Agreement]NewRentFrom:=[Unit]IncreaseFrom
End if 
[Unit]InsureValue:=WS_InsureValue
[Unit]InsureCertNo:=WS_InsureCert
[Agreement]InsureValue:=[Agreement]InsureValue+[Unit]InsureValue
SAVE RECORD([Unit])
SAVE RECORD([Agreement])
InsuranceCalc (True;False;True)
SAVE RECORD([Unit])
SAVE RECORD([Agreement])
WS_CustomerID:=[Agreement]CustomerCode
WS_ORSuccess:=True
WS_ORErrorCode:=0
WS_ORErrorDescription:=""
//WS_ORErrorDescription:="Unit successfully added to Agreement in database Storman."
Else 
//WS_OLD=WS_Edit:=False
WS_ORSuccess:=False
WS_ORErrorCode:=1024
WS_ORErrorDescription:="Invalid Move In date."
End if 
Else 
//WS_OLD=WS_Edit:=False
WS_ORSuccess:=False
WS_ORErrorCode:=1007
WS_ORErrorDescription:="Unit record not found in database Storman."
End if 
End if 


Else 
//WS_OLD=WS_Edit:=False
WS_ORSuccess:=False
WS_ORErrorCode:=1015
WS_ORErrorDescription:="Agreement record not found in database Storman."
End if 

Else 
//WS_OLD=WS_Edit:=False
WS_ORSuccess:=False
WS_ORErrorCode:=1099
WS_ORErrorDescription:="Web Service Password is incorrect."
End if 

READ ONLY([Agreement])
READ ONLY([OtherChgs])
UNLOAD RECORD([OtherChgs])
READ ONLY([Unit])
READ ONLY([Trxs])
READ ONLY([Customer])
UNLOAD RECORD([Agreement])
UNLOAD RECORD([Unit])
UNLOAD RECORD([Trxs])
UNLOAD RECORD([Customer])

$String:="End WS_AddUnit"+Char(13)
$String:=$String+"WS_CustomerID: "+WS_CustomerID+Char(13)
$String:=$String+"WS_ORSuccess: "+String(WS_ORSuccess)+Char(13)
$String:=$String+"WS_ORErrorCode: "+String(WS_ORErrorCode)+Char(13)
$String:=$String+"WS_ORErrorDescription: "+WS_ORErrorDescription+Char(13)
WSRecordLog ($String)


ReadOnlyAll 
UnloadAll 








//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Johnno - Original Method FB9894/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// ----------------------------------------------------
// User name (OS): robert.richardson
// Date and time: 22/04/10, 09:45:47
// ----------------------------------------------------
// Method: WS_AddUnit
// Description
// This will add a unit for a particular unit type to an agreement
//
// Parameters
// ----------------------------------------------------
// Standardized
//TRACE
//SOAP DECLARATION(WS_UTRUnitType;Is String Var;SOAP Input;"WS_UTRUnitType")
//SOAP DECLARATION(WS_RAgreeNo;Is String Var;SOAP Input;"WS_RAgreeNo")
//SOAP DECLARATION(WS_ProrataCharge;Is Boolean;SOAP Input;"WS_ProrataCharge")
//SOAP DECLARATION(WS_ToClean;Is Boolean;SOAP Input;"WS_ToClean")
//SOAP DECLARATION(WS_MoveInDate;Is Date;SOAP Input;"WS_MoveInDate")
//SOAP DECLARATION(WS_BillingPlanSwitch;Is Boolean;SOAP Input;"WS_BillingPlanSwitch")
//SOAP DECLARATION(WS_DepositCharge;Is Boolean;SOAP Input;"WS_DepositCharge")
//SOAP DECLARATION(WS_RegularRent;Is Real;SOAP Input)
//SOAP DECLARATION(WS_NewRent;Is Real;SOAP Input)
//SOAP DECLARATION(WS_NewRentFrom;Is Date;SOAP Input)
//SOAP DECLARATION(WS_InsureValue;Is Real;SOAP Input)
//SOAP DECLARATION(WS_InsureCert;Is Text;SOAP Input)
//SOAP DECLARATION(WS_UnitNo;Is Text;SOAP Input)
//SOAP DECLARATION(WS_WebServicePassword;Is Text;SOAP Input)
//
//  //WS_OLD=SOAP DECLARATION(WS_Edit;Is Boolean;SOAP Output;"WS_Edit")
//SOAP DECLARATION(WS_CustomerID;Is String Var;SOAP Output;"WS_CustomerID")
//
//SOAP DECLARATION(WS_ORSuccess;Is Boolean;SOAP Output)
//SOAP DECLARATION(WS_ORErrorCode;Is Integer;SOAP Output)
//SOAP DECLARATION(WS_ORErrorDescription;Is String Var;SOAP Output)
//
//  //Clear Variables before running method.
//WS_ORSuccess:=True
//WS_ORErrorCode:=0
//WS_ORErrorDescription:=""
//
//$String:="Start WS_AddUnit"+Char(13)
//$String:=$String+"WS_UTRUnitType: "+WS_UTRUnitType+Char(13)
//$String:=$String+"WS_RAgreeNo: "+WS_RAgreeNo+Char(13)
//$String:=$String+"WS_ProrataCharge: "+String(WS_ProrataCharge)+Char(13)
//$String:=$String+"WS_ToClean: "+String(WS_ToClean)+Char(13)
//$String:=$String+"WS_MoveInDate: "+String(WS_MoveInDate)+Char(13)
//$String:=$String+"WS_BillingPlanSwitch: "+String(WS_BillingPlanSwitch)+Char(13)
//$String:=$String+"WS_DepositCharge: "+String(WS_DepositCharge)+Char(13)
//C_TEXT($pass)
//$pass:=WS_WebServicePassword
//$pass:=Replace string($pass;Substring($pass;1;Length($pass)-2);"X"*(Length($pass)-2))
//$String:=$String+"WS_WebServicePassword: "+$pass+Char(13)
//$String:=$String+"WS_RegularRent: "+String(WS_RegularRent)+Char(13)
//$String:=$String+"WS_NewRent: "+String(WS_NewRent)+Char(13)
//$String:=$String+"WS_NewRentFrom: "+String(WS_NewRentFrom)+Char(13)
//$String:=$String+"WS_InsureValue: "+String(WS_InsureValue)+Char(13)
//$String:=$String+"WS_InsureCert: "+WS_InsureCert+Char(13)
//$String:=$String+"WS_UnitNo: "+WS_UnitNo+Char(13)
//WSRecordLog ($String)
//
//
//READ WRITE([Agreement])
//READ WRITE([OtherChgs])
//READ WRITE([Unit])
//READ WRITE([Trxs])
//READ WRITE([Customer])
//
//LOAD RECORD([Agreement])
//LOAD RECORD([Unit])
//LOAD RECORD([Trxs])
//LOAD RECORD([Customer])
//
//WS_CustomerID:="Invalid"
//bAdd:=0
//bAll:=0
//asShowHistory:=0
//viMatch:=-1
//
//QUERY([Facility];[Facility]FacilityCode=Substring(WS_RAgreeNo;1;5))
//
//If (WS_WebServicePassword=[Facility]ODBCPassword) & ([Facility]ODBCPassword#"")
//
//QUERY([Agreement];[Agreement]RAgreeNo=WS_RAgreeNo;*)
//QUERY([Agreement]; & ;[Agreement]ActiveAgreemt=True)
//
//If (Records in selection([Agreement])=1)
//QUERY([Unit];[Unit]Status="Vacant";*)
//If (WS_UnitNo#"")
//QUERY([Unit]; & ;[Unit]RUnitNo=WS_UnitNo;*)
//End if 
//QUERY([Unit]; & ;[Unit]UnitTypeCode=WS_UTRUnitType)
//
//If (Records in selection([Unit])>0)
//FIRST RECORD([Unit])
//Repeat 
//$Locked:=Locked([Unit])
//If ($Locked=True) | ((WS_MoveInDate<=[Unit]MoveOut) | (([Unit]MoveOut=!00/00/0000!) & ([Unit]MoveIn#!00/00/0000!)))
//NEXT RECORD([Unit])
//End if 
//  //johnnoUntil (($Locked=False) & ((WS_MoveInDate<=[Unit]MoveOut) | ([Unit]MoveOut=!00/00/0000!))) | ([Unit]RUnitNo="")
//Until (($Locked=False) & ((WS_MoveInDate>=[Unit]MoveOut) | (([Unit]MoveOut=!00/00/0000!) & ([Unit]MoveIn=!00/00/0000!)))) | ([Unit]RUnitNo="")
//If (WS_MoveInDate>[Agreement]MoveIn) & (WS_MoveInDate<=(Current date+[Facility]FutureMoveIns)) & ([Unit]RUnitNo>"")
//SelectUnitA (True;True;WS_ProrataCharge;WS_MoveInDate;WS_BillingPlanSwitch;WS_DepositCharge;WS_RegularRent)
//[Unit]NewRentAmt:=WS_NewRent
//[Unit]WeeklyNewRentAmt:=WS_NewRent
//[Unit]DailyNewRent:=WS_NewRent
//[Unit]IncreaseFrom:=WS_NewRentFrom
//If (WS_NewRentFrom#!00/00/0000!)
//[Agreement]NewRentFrom:=[Unit]IncreaseFrom
//End if 
//[Unit]InsureValue:=WS_InsureValue
//[Unit]InsureCertNo:=WS_InsureCert
//[Agreement]InsureValue:=[Agreement]InsureValue+[Unit]InsureValue
//SAVE RECORD([Unit])
//SAVE RECORD([Agreement])
//InsuranceCalc (True;False;True)
//WS_CustomerID:=[Agreement]CustomerCode
//WS_ORSuccess:=True
//WS_ORErrorCode:=0
//WS_ORErrorDescription:=""
//  //WS_ORErrorDescription:="Unit successfully added to Agreement in database Storman."
//Else 
//  //WS_OLD=WS_Edit:=False
//WS_ORSuccess:=False
//WS_ORErrorCode:=1024
//WS_ORErrorDescription:="Invalid Move In date."
//End if 
//Else 
//QUERY([Unit];[Unit]Status="ToClean";*)
//If (WS_UnitNo#"")
//QUERY([Unit]; & ;[Unit]RUnitNo=WS_UnitNo;*)
//End if 
//QUERY([Unit]; & ;[Unit]UnitTypeCode=WS_UTRUnitType)
//If (WS_ToClean=True) & (Records in selection([Unit])>0)
//FIRST RECORD([Unit])
//Repeat 
//$Locked:=Locked([Unit])
//If ($Locked=True) | ((WS_MoveInDate<=[Unit]MoveOut) | ([Unit]MoveOut=!00/00/0000!))
//NEXT RECORD([Unit])
//End if 
//Until (($Locked=False) & ((WS_MoveInDate<=[Unit]MoveOut) | ([Unit]MoveOut=!00/00/0000!))) | ([Unit]RUnitNo="")
//If (WS_MoveInDate>[Agreement]MoveIn) & (WS_MoveInDate<=(Current date+[Facility]FutureMoveIns)) & ([Unit]RUnitNo>"")
//SelectUnitA (True;True;WS_ProrataCharge;WS_MoveInDate;WS_BillingPlanSwitch;WS_DepositCharge;WS_RegularRent)
//[Unit]NewRentAmt:=WS_NewRent
//[Unit]WeeklyNewRentAmt:=WS_NewRent
//[Unit]DailyNewRent:=WS_NewRent
//[Unit]IncreaseFrom:=WS_NewRentFrom
//If (WS_NewRentFrom#!00/00/0000!)
//[Agreement]NewRentFrom:=[Unit]IncreaseFrom
//End if 
//[Unit]InsureValue:=WS_InsureValue
//[Unit]InsureCertNo:=WS_InsureCert
//[Agreement]InsureValue:=[Agreement]InsureValue+[Unit]InsureValue
//SAVE RECORD([Unit])
//SAVE RECORD([Agreement])
//InsuranceCalc (True;False;True)
//WS_CustomerID:=[Agreement]CustomerCode
//WS_ORSuccess:=True
//WS_ORErrorCode:=0
//WS_ORErrorDescription:=""
//  //WS_ORErrorDescription:="Unit successfully added to Agreement in database Storman."
//Else 
//  //WS_OLD=WS_Edit:=False
//WS_ORSuccess:=False
//WS_ORErrorCode:=1024
//WS_ORErrorDescription:="Invalid Move In date."
//End if 
//Else 
//  //WS_OLD=WS_Edit:=False
//WS_ORSuccess:=False
//WS_ORErrorCode:=1007
//WS_ORErrorDescription:="Unit record not found in database Storman."
//End if 
//End if 
//
//
//Else 
//  //WS_OLD=WS_Edit:=False
//WS_ORSuccess:=False
//WS_ORErrorCode:=1015
//WS_ORErrorDescription:="Agreement record not found in database Storman."
//End if 
//
//Else 
//  //WS_OLD=WS_Edit:=False
//WS_ORSuccess:=False
//WS_ORErrorCode:=1099
//WS_ORErrorDescription:="Web Service Password is incorrect."
//End if 
//
//READ ONLY([Agreement])
//READ ONLY([OtherChgs])
//UNLOAD RECORD([OtherChgs])
//READ ONLY([Unit])
//READ ONLY([Trxs])
//READ ONLY([Customer])
//UNLOAD RECORD([Agreement])
//UNLOAD RECORD([Unit])
//UNLOAD RECORD([Trxs])
//UNLOAD RECORD([Customer])
//
//$String:="End WS_AddUnit"+Char(13)
//$String:=$String+"WS_CustomerID: "+WS_CustomerID+Char(13)
//$String:=$String+"WS_ORSuccess: "+String(WS_ORSuccess)+Char(13)
//$String:=$String+"WS_ORErrorCode: "+String(WS_ORErrorCode)+Char(13)
//$String:=$String+"WS_ORErrorDescription: "+WS_ORErrorDescription+Char(13)
//WSRecordLog ($String)
//
//
//ReadOnlyAll 
//UnloadAll 

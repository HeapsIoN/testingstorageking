//%attributes = {"lang":"en"} comment added and reserved by 4D.
//To change all dates to bring them up to date  SetupArrays 
C_LONGINT($i;$flag)
C_BOOLEAN($1;$2;$fromLogmon)//brand new demo
C_LONGINT($Day;$Month;$Year)
C_DATE($DemoDate)

// from logmon
// if from logmon $Offset:=1


QUERY([Trxs];[Trxs]TrxDate>!00-00-00!)
ORDER BY([Trxs];[Trxs]TrxDate;<)
FIRST RECORD([Trxs])

$fromLogmon:=False
$fromLogmon:=$2

If ($fromLogmon)
$Offset:=1//Current date-[Trxs]TrxDate-1
Else 
$Offset:=Current date-[Trxs]TrxDate-30
End if 

//$Offset:=Current date-[Trxs]TrxDate-30

If ($fromLogmon) | ($Offset>30)

$CurrentUser:=SetSyncUser ("Sync";3)
$Facility:=[Facility]FacilityCode
READ WRITE(*)
Open window(20;50;300;150;0;Get localized string("Progress"))
If ($1=False)
ALL RECORDS([Facility])
For ($i;1;Records in selection([Facility]))
GOTO XY(2;2)
MESSAGE(Get localized string("Facility")+" "+String($i)+" "+Get localized string("of")+" "+String(Records in selection([Facility]))+"     ")
[Facility]LastDaily:=AddToDate ([Facility]LastDaily;$Offset)
[Facility]LastBanking:=AddToDate ([Facility]LastBanking;$Offset)
[Facility]ReCalcActivity:=AddToDate ([Facility]ReCalcActivity;$Offset)
SAVE RECORD([Facility])
NEXT RECORD([Facility])
End for 
End if 
ALL RECORDS([Unit])
For ($i;1;Records in selection([Unit]))
GOTO XY(2;2)
MESSAGE(Get localized string("Unit")+" "+String($i)+" "+Get localized string("of")+" "+String(Records in selection([Unit]))+"     ")
[Unit]MoveIn:=AddToDate ([Unit]MoveIn;$Offset)
[Unit]MoveOut:=AddToDate ([Unit]MoveOut;$Offset)
[Unit]ReservedDate:=AddToDate ([Unit]ReservedDate;$Offset)
SAVE RECORD([Unit])
NEXT RECORD([Unit])
End for 
ALL RECORDS([Agreement])
For ($i;1;Records in selection([Agreement]))
GOTO XY(2;2)
MESSAGE(Get localized string("Agreement")+" "+String($i)+" "+Get localized string("of")+" "+String(Records in selection([Agreement]))+"     ")
[Agreement]MoveIn:=AddToDate ([Agreement]MoveIn;$Offset)
[Agreement]MoveOut:=AddToDate ([Agreement]MoveOut;$Offset)
$Day:=Day of([Agreement]MoveIn)
$Month:=Month of(Current date)
$Year:=Year of(Current date)
$DemoDate:=Date(String($day)+"/"+String($Month)+"/"+String($year))
[Agreement]NextBillDate:=$DemoDate
//[Agreement]NextBillDate:=AddToDate ([Agreement]NextBillDate;$Offset)
[Agreement]InsureCommence:=AddToDate ([Agreement]InsureCommence;$Offset)
[Agreement]InsureExpire:=AddToDate ([Agreement]InsureExpire;$Offset)
[Agreement]OutNoticeDate:=AddToDate ([Agreement]OutNoticeDate;$Offset)
[Agreement]LastBillDate:=AddToDate ([Agreement]LastBillDate;$Offset)
[Agreement]NewRentFrom:=AddToDate ([Agreement]NewRentFrom;$Offset)
[Agreement]LateCycleStDate:=AddToDate ([Agreement]LateCycleStDate;$Offset)
[Agreement]PaidToDate:=AddToDate ([Agreement]PaidToDate;$Offset)
[Agreement]AnticipateMoveOut:=AddToDate ([Agreement]AnticipateMoveOut;$Offset)
[Agreement]LienDate:=AddToDate ([Agreement]LienDate;$Offset)
[Agreement]LastRentIncrDate:=AddToDate ([Agreement]LastRentIncrDate;$Offset)
[Agreement]PriorLastBill:=AddToDate ([Agreement]PriorLastBill;$Offset)
[Agreement]AuthCCSigned:=AddToDate ([Agreement]AuthCCSigned;$Offset)
[Agreement]AuthCCExpiry:=AddToDate ([Agreement]AuthCCExpiry;$Offset)
[Agreement]LastPmtDate:=AddToDate ([Agreement]LastPmtDate;$Offset)
[Agreement]DaytoBill:=Day of([Agreement]NextBillDate)
If ([Agreement]AutoPay=True)
[Agreement]AutoPayType:=1
End if 
SAVE RECORD([Agreement])
NEXT RECORD([Agreement])
End for 
ALL RECORDS([Trxs])
For ($i;1;Records in selection([Trxs]))
GOTO XY(2;2)
MESSAGE(Get localized string("Transaction")+" "+String($i)+" "+Get localized string("of")+" "+String(Records in selection([Trxs]))+"     ")
[Trxs]TrxDate:=AddToDate ([Trxs]TrxDate;$Offset)
[Trxs]DateBanked:=AddToDate ([Trxs]DateBanked;$Offset)
[Trxs]DateFrom:=AddToDate ([Trxs]DateFrom;$Offset)
[Trxs]DateTo:=AddToDate ([Trxs]DateTo;$Offset)
SAVE RECORD([Trxs])
NEXT RECORD([Trxs])
End for 
ALL RECORDS([Reservation])
For ($i;1;Records in selection([Reservation]))
GOTO XY(2;2)
MESSAGE(Get localized string("Reservation")+" "+String($i)+" "+Get localized string("of")+" "+String(Records in selection([Reservation]))+"     ")
[Reservation]ReservedDate:=AddToDate ([Reservation]ReservedDate;$Offset)
[Reservation]ExpMoveIn:=AddToDate ([Reservation]ExpMoveIn;$Offset)
[Reservation]DateDepPaid:=AddToDate ([Reservation]DateDepPaid;$Offset)
[Reservation]OutcomeDate:=AddToDate ([Reservation]OutcomeDate;$Offset)
SAVE RECORD([Reservation])
NEXT RECORD([Reservation])
End for 
QUERY([UnitHistory];[UnitHistory]Casual=False)
For ($i;1;Records in selection([UnitHistory]))
GOTO XY(2;2)
MESSAGE(Get localized string("UnitHistory")+" "+String($i)+" "+Get localized string("of")+" "+String(Records in selection([UnitHistory]))+"     ")
[UnitHistory]MoveIn:=AddToDate ([UnitHistory]MoveIn;$Offset)
[UnitHistory]MoveOut:=AddToDate ([UnitHistory]MoveOut;$Offset)
SAVE RECORD([UnitHistory])
NEXT RECORD([UnitHistory])
End for 
ALL RECORDS([Letters])
ORDER BY([Letters];[Letters]AgreeNo;>)
ALL RECORDS([Contacts])
For ($i;1;Records in selection([Contacts]))
GOTO XY(2;2)
MESSAGE(Get localized string("Contacts")+" "+String($i)+" "+Get localized string("of")+" "+String(Records in selection([Contacts]))+"     ")
[Contacts]CallDate:=AddToDate ([Contacts]CallDate;$Offset)
[Contacts]FollowUpDate:=AddToDate ([Contacts]FollowUpDate;$Offset)
[Contacts]OutComeDate:=AddToDate ([Contacts]OutComeDate;$Offset)
[Contacts]WhenRequired:=AddToDate ([Contacts]WhenRequired;$Offset)
SAVE RECORD([Contacts])
NEXT RECORD([Contacts])
End for 
CLOSE WINDOW
ALL RECORDS([Customer])
APPLY TO SELECTION([Customer];[Customer]LatestTrxDate:=AddToDate ([Customer]LatestTrxDate;$Offset))
ALL RECORDS([Letters])
APPLY TO SELECTION([Letters];[Letters]DateSent:=AddToDate ([Letters]DateSent;$Offset))
ALL RECORDS([PhotosCards])
APPLY TO SELECTION([PhotosCards];[PhotosCards]DateTaken:=AddToDate ([PhotosCards]DateTaken;$Offset))
ALL RECORDS([GateLog])
APPLY TO SELECTION([GateLog];[GateLog]GateDate:=AddToDate ([GateLog]GateDate;$Offset))
ALL RECORDS([NotesHistory])
APPLY TO SELECTION([NotesHistory];[NotesHistory]NoteDate:=AddToDate ([NotesHistory]NoteDate;$Offset))
ALL RECORDS([Activity])
APPLY TO SELECTION([Activity];[Activity]ActivityDate:=AddToDate ([Activity]ActivityDate;$Offset))
SetSyncUser ("Sync";2)
SetSyncUser ($CurrentUser)
READ ONLY(*)
UnloadAll 
ALL RECORDS([Facility])
////// added 17/10/16 by eugene
<>tBatch:=True
CalcBalance (True;False;True;True)
<>tBatch:=False
End if 
SetFacility 


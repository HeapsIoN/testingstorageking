//%attributes = {"lang":"en"} comment added and reserved by 4D.

// ----------------------------------------------------
// User name (OS): jonathon.wildon
// Date and time: 04/03/16, 11:34:38
// ----------------------------------------------------
// Method: v10Fix
// Description
//
// This method is used to remove unwanted records, and 
// regenerate primary keys coming from v13 to v15.
//
// Parameters
// ----------------------------------------------------

// The Original method commented by Hamid - 26/4/2016 - 10409


//  //FB10442
//ConfirmTwo ("WARNING! This process will permanently delete records in the Storman database. Are you sure you want to continue?";"Yes";"No")
//$WinRef:=Open window(50;120;450;220;8;"Please wait...")

//If (OK=1)
//RemoveOldGroups   //removes usergroup records for usergroups that do not have userlogin or Groups anymore.
//v10Fix_Unwanted   //removed records that do not match facililty
//v10Fix_OldTables   //removes records from old tables
//End if 

//CLOSE WINDOW($WinRef)

//  //ALL RECORDS([Facility])
//  //If (Records in table([Facility])=1)  // If single facility remove other site payments and we will manually restore via HOF
//  //Unwanted   //removed records that do not match facililty  //fb10442
//  //QUERY([Trxs];[Trxs]CustomerCode#<>SFACILITY+"@")
//  //If (Records in selection([Trxs])>0)
//  //DELETE SELECTION([Trxs])
//  //End if 
//  //End if 

//  //FB10442
//ConfirmTwo ("Storman will now check and fix any records with broken primary keys. Would you like to continue?";"Yes";"No")

//If (OK=1)

//  //GiveNewKeys   //gives UUID to PK fields of non syncing tables
//C_LONGINT($NextAvail;$TableNo;$FieldNo)
//$TableNo:=0
//$FieldNo:=0
//For ($i;2;Get last table number)

//Case of 
//: ($i=2)
//$FieldNo:=27
//$TableNo:=$i

//: ($i=3)
//$FieldNo:=56
//$TableNo:=$i

//: ($i=4)
//$FieldNo:=113
//$TableNo:=$i

//: ($i=5)
//$FieldNo:=114
//$TableNo:=$i

//  //: ($i=6)
//  //$FieldNo:=37
//  //$TableNo:=$i

//: ($i=7)
//$FieldNo:=31
//$TableNo:=$i

//: ($i=8)
//$FieldNo:=24
//$TableNo:=$i

//: ($i=9)
//$FieldNo:=41
//$TableNo:=$i

//: ($i=11)
//$FieldNo:=19
//$TableNo:=$i

//: ($i=12)
//$FieldNo:=48
//$TableNo:=$i

//: ($i=13)  //////////////////////////////////////////gatelog??
//$FieldNo:=10
//$TableNo:=$i

//: ($i=14)
//$FieldNo:=13
//$TableNo:=$i

//: ($i=15)
//$FieldNo:=8
//$TableNo:=$i

//: ($i=17)
//$FieldNo:=20
//$TableNo:=$i

//: ($i=20)
//$FieldNo:=7
//$TableNo:=$i

//  //: ($i=26)
//  //$FieldNo:=21
//  //$TableNo:=$i

//: ($i=28)
//$FieldNo:=9
//$TableNo:=$i

//: ($i=29)
//$FieldNo:=7
//$TableNo:=$i

//: ($i=32)
//$FieldNo:=8
//$TableNo:=$i

//: ($i=33)
//$FieldNo:=10
//$TableNo:=$i

//: ($i=34)
//$FieldNo:=6
//$TableNo:=$i

//: ($i=35)
//$FieldNo:=13
//$TableNo:=$i

//  //: ($i=37)
//  //$FieldNo:=8
//  //$TableNo:=$i

//  //: ($i=41)
//  //$FieldNo:=7
//  //$TableNo:=$i

//: ($i=42)
//$FieldNo:=9
//$TableNo:=$i

//: ($i=46)
//$FieldNo:=1
//$TableNo:=$i

//: ($i=47)
//$FieldNo:=1
//$TableNo:=$i

//: ($i=48)
//$FieldNo:=1
//$TableNo:=$i

//: ($i=49)
//$FieldNo:=1
//$TableNo:=$i

//: ($i=50)
//$FieldNo:=10
//$TableNo:=$i

//: ($i=51)
//$FieldNo:=5
//$TableNo:=$i

//: ($i=52)
//$FieldNo:=4
//$TableNo:=$i

//: ($i=53)
//$FieldNo:=1
//$TableNo:=$i
//Else 
//  //nothing
//End case 
//  //$i:=13
//  //$TableNo:=13
//  //$FieldNo:=10

//  //$TableNo:=$i
//If ($TableNo#0)
//$Field:=Field($i;$FieldNo)

//  //ORDER BY(Current default table->;$Field->;>)
//$Last:=-32000
//$Found:=""
//$WinRef:=Open window(20;150;600;250;0;Get localized string("Progress"))

//CREATE EMPTY SET(Table($i)->;"DupSet")
//CREATE EMPTY SET(Table($i)->;"ToDelSet")
//ALL RECORDS(Table($i)->)
//ORDER BY(Table($i)->;$Field->;>)

//For ($a;1;Records in selection(Table($i)->))
//GOTO XY(2;2)
//If ($Last=$Field->)
//$Found:=$Found+String($Last)+","
//ADD TO SET(Table($i)->;"DupSet")
//MESSAGE("Searching for duplicate records on table "+Table name(Table($i))+": "+String($a)+" of "+String(Records in selection(Table($i)->)))  //Johnno
//Else 
//MESSAGE("Searching for duplicate records on table "+Table name(Table($i))+": "+String($a)+" of "+String(Records in selection(Table($i)->)))  //Johnno
//End if 
//$Last:=$Field->
//NEXT RECORD(Table($i)->)
//End for 
//CLOSE WINDOW($WinRef)



//ALL RECORDS([Facility])
//FIRST RECORD([Facility])
//$PrimaryKeyMax:=[Facility]PrimaryKeyMax
//$PrimaryKeyMin:=[Facility]PrimaryKeyMin
//$ProductCode:=[Facility]ProductCode
//$NextAvail:=0

//$pTable:=Table($i)
//  //$pPrimary:=Field($b;<>aiPrimaryKeyField{$b})
//$pPrimary:=Field($i;<>aiPrimaryKeyField{$i})
//  //$Field->
//$pFacility:=Field($i;<>aiFacilityField{$i})
//If ([Facility]ProductCode="M@")
//QUERY($pTable->;$pPrimary->>$PrimaryKeyMin;*)
//QUERY($pTable->; | ;$pPrimary-><$PrimaryKeyMax;*)
//QUERY($pTable->; | ;$pPrimary->=0;*)
//QUERY($pTable->; & ;$pFacility->=[Facility]FacilityCode+"@")
//$NextAvail:=$PrimaryKeyMin-1
//Else 
//QUERY($pTable->;$pPrimary->>$PrimaryKeyMin;*)
//QUERY($pTable->; | ;$pPrimary-><$PrimaryKeyMax;*)
//QUERY($pTable->; | ;$pPrimary->=0;*)
//QUERY($pTable->; & ;$pFacility->=[Facility]FacilityCode+"@")
//ORDER BY($pTable->;$pPrimary->;<)
//$NextAvail:=$pPrimary->+1
//End if 

//USE SET("DupSet")
//If (Records in selection($pTable->)>0)
//COPY SET("DupSet";"ToDelSet")
//$pPrimary:=Field($i;<>aiPrimaryKeyField{$i})
//FIRST RECORD($pTable->)
//READ WRITE($pTable->)

//C_OBJECT($oDuplicate)
//C_LONGINT($recordsNo)
//C_TEXT($Path)
//C_BLOB($Blobpic)
//ARRAY OBJECT($aoDuplicate;0)
//$record:=0
//While (Not(End selection($pTable->)))
//$record:=$record+1
//$p:=0
//For ($p;1;Get last field number($pTable))
//If (Is field number valid($pTable;$p))
//$Type:=Type(Field(Table($pTable);$p)->)
//Case of 
//: ($Type=Is integer) | ($Type=Is longint) | ($Type=Is real) | ($Type=Is float) | ($Type=Is integer 64 bits) | ($Type=Is Boolean)
//OB SET($oDuplicate;String($p);(Field(Table($pTable);$p)->))

//: ($Type=Is date) | ($Type=Is time)
//OB SET($oDuplicate;String($p);String((Field(Table($pTable);$p)->)))
//  //DAM Removed String
//: ($Type=Is BLOB)

//$Path:=""
//$Path:="BlobTable"+String(Table($pTable->))+"Rec"+String($record)+":"+String($p)
//BLOB PROPERTIES(Field(Table($pTable);$p)->;$Compressed)
//If ($Compressed#Is not compressed)
//EXPAND BLOB(Field(Table($pTable);$p)->)
//End if 
//If (Test path name($Path+".txt")=Is a document)
//DELETE DOCUMENT($Path+".txt")
//End if 
//BLOB TO DOCUMENT($Path+".txt";Field(Table($pTable);$p)->)
//OB SET($oDuplicate;"Path";$Path+".txt")


//: ($Type=Is picture)

//$Path:=""
//  ////$Path:="BlobTable"+String(Table($pTable->))+"Rec"+String($record)+":"+String($p) //fb10413
//$Path:="BlobTable"+String(Table($pTable))+"Rec"+String($record)+":"+String($p)
//If (Test path name($Path+".txt")=Is a document)
//DELETE DOCUMENT($Path+".txt")
//End if 
//PICTURE TO BLOB(Field(Table($pTable);$p)->;$Blobpic;".png")
//BLOB TO DOCUMENT($Path+".txt";$Blobpic)
//OB SET($oDuplicate;"Path";$Path+".txt")

//Else 
//OB SET($oDuplicate;String($p);Field(Table($pTable);$p)->)
//End case 

//End if 
//End for 
//APPEND TO ARRAY($aoDuplicate;$oDuplicate)
//NEXT RECORD($pTable->)
//End while 

//USE SET("DupSet")
//SyncRecordLog ("Table: "+String(Table($pTable))+" Records: "+String(Records in selection($pTable->));"PrimaryKeyFix")
//DELETE SELECTION($pTable->)

//  //then recreate records based on array object

//For ($u;1;Size of array($aoDuplicate))
//CREATE RECORD($pTable->)
//$p:=0
//For ($p;1;Get last field number($pTable))
//If (Is field number valid($pTable;$p))
//$Type:=Type(Field(Table($pTable);$p)->)

//Case of 
//: (Field name(Field(Table($pTable);$p))="PrimaryKey")
//  //Skip

//: ($Type=Is integer) | ($Type=Is longint) | ($Type=Is real) | ($Type=Is float) | ($Type=Is integer 64 bits) | ($Type=Is Boolean)
//Field(Table($pTable);$p)->:=OB Get($aoDuplicate{$u};String($p))

//: ($Type=Is date)
//Field(Table($pTable);$p)->:=Date(OB Get($aoDuplicate{$u};String($p)))

//: ($Type=Is time)
//Field(Table($pTable);$p)->:=Time(OB Get($aoDuplicate{$u};String($p)))

//: ($Type=Is BLOB)
//$Path:=""
//$Path:=OB Get($aoDuplicate{$p};"Path")
//DOCUMENT TO BLOB($Path;Field(Table($pTable);$p)->)
//COMPRESS BLOB(Field(Table($pTable);$p)->;Fast compression mode)

//If (Test path name($Path+".txt")=Is a document)
//DELETE DOCUMENT($Path+".txt")
//End if 

//: ($Type=Is picture)

//$Path:=""
//$Path:=OB Get($aoDuplicate{$u};"Path")
//DOCUMENT TO BLOB($Path;$Blobpic)
//BLOB TO PICTURE($Blobpic;Field(Table($pTable);$p)->)

//If (Test path name($Path+".txt")=Is a document)
//DELETE DOCUMENT($Path+".txt")
//End if 

//Else 
//Field(Table($pTable);$p)->:=OB Get($aoDuplicate{$u};String($p))
//End case 

//End if 
//End for 

//SAVE RECORD($pTable->)
//End for 

//  //While (Records in selection($pTable->)>0)

//  //DUPLICATE RECORD($pTable->)
//  //$pPrimary->:=$NextAvail
//  //$NextAvail:=$NextAvail+1
//  //SAVE RECORD($pTable->)

//  //USE SET("DupSet")
//  //FIRST RECORD($pTable->)
//  //REMOVE FROM SET($pTable->;"DupSet")
//  //USE SET("DupSet")

//  //End while 
//End if 
//  //<>aliPrimaryKeys{$i}:=$NextAvail
//  //USE SET("ToDelSet")
//  //DELETE SELECTION(Table($i)->)
//End if 


//CLEAR SET("ToDelSet")
//CLEAR SET("DupSet")

//READ ONLY(Table($i)->)

//$TableNo:=0
//End for 


//End if 



// ----------------------------------------------------
// User name (OS): jonathon.wildon
// Date and time: 04/03/16, 11:34:38
// ----------------------------------------------------
// Method: v10Fix
// Description
//
// This method is used to remove unwanted records, and 
// regenerate primary keys coming from v13 to v15.
//
// Parameters
// ----------------------------------------------------

//FB10442
ConfirmTwo ("WARNING! This process will permanently delete records in the Storman database. Are you sure you want to continue?";"Yes";"No")
$WinRef:=Open window(50;120;450;220;8;"Please wait...")

If (OK=1)
RemoveOldGroups //removes usergroup records for usergroups that do not have userlogin or Groups anymore.
v10Fix_Unwanted //removed records that do not match facililty
v10Fix_OldTables //removes records from old tables
End if 

CLOSE WINDOW($WinRef)

//ALL RECORDS([Facility])
//If (Records in table([Facility])=1)  // If single facility remove other site payments and we will manually restore via HOF
//Unwanted   //removed records that do not match facililty  //fb10442
//QUERY([Trxs];[Trxs]CustomerCode#<>SFACILITY+"@")
//If (Records in selection([Trxs])>0)
//DELETE SELECTION([Trxs])
//End if 
//End if 

//FB10442
ConfirmTwo ("Storman will now check and fix any records with broken primary keys. Would you like to continue?";"Yes";"No")

If (OK=1)

//GiveNewKeys   //gives UUID to PK fields of non syncing tables
C_LONGINT($NextAvail;$TableNo;$FieldNo)
$TableNo:=0
$FieldNo:=0
For ($i;2;Get last table number)
Case of 
: ($i=2)
$FieldNo:=27
$TableNo:=$i

: ($i=3)
$FieldNo:=56
$TableNo:=$i

: ($i=4)
$FieldNo:=113
$TableNo:=$i

: ($i=5)
$FieldNo:=114
$TableNo:=$i

//: ($i=6)
//$FieldNo:=37
//$TableNo:=$i

: ($i=7)
$FieldNo:=31
$TableNo:=$i

: ($i=8)
$FieldNo:=24
$TableNo:=$i

: ($i=9)
$FieldNo:=41
$TableNo:=$i

: ($i=11)
$FieldNo:=19
$TableNo:=$i

: ($i=12)
$FieldNo:=48
$TableNo:=$i

: ($i=13)//////////////////////////////////////////gatelog??
$FieldNo:=10
$TableNo:=$i

: ($i=14)
$FieldNo:=13
$TableNo:=$i

: ($i=15)
$FieldNo:=8
$TableNo:=$i

: ($i=17)
$FieldNo:=20
$TableNo:=$i

: ($i=20)
$FieldNo:=7
$TableNo:=$i

//: ($i=26)
//$FieldNo:=21
//$TableNo:=$i

: ($i=28)
$FieldNo:=9
$TableNo:=$i

: ($i=29)
$FieldNo:=7
$TableNo:=$i

: ($i=32)
$FieldNo:=8
$TableNo:=$i

: ($i=33)
$FieldNo:=10
$TableNo:=$i

: ($i=34)
$FieldNo:=6
$TableNo:=$i

: ($i=35)
$FieldNo:=13
$TableNo:=$i

//: ($i=37)
//$FieldNo:=8
//$TableNo:=$i

//: ($i=41)
//$FieldNo:=7
//$TableNo:=$i

: ($i=42)
$FieldNo:=9
$TableNo:=$i

: ($i=46)
$FieldNo:=1
$TableNo:=$i

: ($i=47)
$FieldNo:=1
$TableNo:=$i

: ($i=48)
$FieldNo:=1
$TableNo:=$i

: ($i=49)
$FieldNo:=1
$TableNo:=$i

: ($i=50)
$FieldNo:=10
$TableNo:=$i

: ($i=51)
$FieldNo:=5
$TableNo:=$i

: ($i=52)
$FieldNo:=4
$TableNo:=$i

: ($i=53)
$FieldNo:=1
$TableNo:=$i
Else 
//nothing
End case 
//$i:=13
//$TableNo:=29
//$FieldNo:=10

//$TableNo:=$i
If ($TableNo#0)
$Field:=Field($i;$FieldNo)

//ORDER BY(Current default table->;$Field->;>)
$Last:=-32000
$Found:=""
$WinRef:=Open window(20;150;600;250;0;Get localized string("Progress"))

CREATE EMPTY SET(Table($i)->;"DupSet")
CREATE EMPTY SET(Table($i)->;"ToDelSet")
ALL RECORDS(Table($i)->)
ORDER BY(Table($i)->;$Field->;>)

For ($a;1;Records in selection(Table($i)->))
GOTO XY(2;2)
If ($Last=$Field->)
$Found:=$Found+String($Last)+","
ADD TO SET(Table($i)->;"DupSet")
MESSAGE("Searching for duplicate records on table "+Table name(Table($i))+": "+String($a)+" of "+String(Records in selection(Table($i)->)))//Johnno
Else 
MESSAGE("Searching for duplicate records on table "+Table name(Table($i))+": "+String($a)+" of "+String(Records in selection(Table($i)->)))//Johnno
End if 
$Last:=$Field->
NEXT RECORD(Table($i)->)
End for 
CLOSE WINDOW($WinRef)



ALL RECORDS([Facility])
FIRST RECORD([Facility])
$PrimaryKeyMax:=[Facility]PrimaryKeyMax
$PrimaryKeyMin:=[Facility]PrimaryKeyMin
$ProductCode:=[Facility]ProductCode
$NextAvail:=0

$pTable:=Table($i)
//$pPrimary:=Field($b;<>aiPrimaryKeyField{$b})
$pPrimary:=Field($i;<>aiPrimaryKeyField{$i})
//$Field->
$pFacility:=Field($i;<>aiFacilityField{$i})
If ([Facility]ProductCode="M@")
QUERY($pTable->;$pPrimary->>$PrimaryKeyMin;*)
QUERY($pTable->; | ;$pPrimary-><$PrimaryKeyMax;*)
QUERY($pTable->; | ;$pPrimary->=0;*)
QUERY($pTable->; & ;$pFacility->=[Facility]FacilityCode+"@")
$NextAvail:=$PrimaryKeyMin-1
Else 
QUERY($pTable->;$pPrimary->>$PrimaryKeyMin;*)
QUERY($pTable->; | ;$pPrimary-><$PrimaryKeyMax;*)
QUERY($pTable->; | ;$pPrimary->=0;*)
QUERY($pTable->; & ;$pFacility->=[Facility]FacilityCode+"@")
ORDER BY($pTable->;$pPrimary->;<)
$NextAvail:=$pPrimary->+1
End if 

USE SET("DupSet")
If (Records in selection($pTable->)>0)
COPY SET("DupSet";"ToDelSet")
$pPrimary:=Field($i;<>aiPrimaryKeyField{$i})
FIRST RECORD($pTable->)
READ WRITE($pTable->)

C_OBJECT($oDuplicate)
C_LONGINT($recordsNo)
C_TEXT($Path)
C_BLOB($Blobpic)
ARRAY OBJECT($aoDuplicate;0)
$record:=0
While (Not(End selection($pTable->)))
$record:=$record+1
$p:=0
For ($p;1;Get last field number($pTable))
If (Is field number valid($pTable;$p))
$Type:=Type(Field(Table($pTable);$p)->)
Case of 
: ($Type=Is integer) | ($Type=Is longint) | ($Type=Is real) | ($Type=Is float) | ($Type=Is integer 64 bits) | ($Type=Is Boolean)
OB SET($oDuplicate;String($p);(Field(Table($pTable);$p)->))

: ($Type=Is date) | ($Type=Is time)
OB SET($oDuplicate;String($p);String((Field(Table($pTable);$p)->)))
//DAM Removed String
: ($Type=Is BLOB)

$Path:=""
$Path:="BlobTable"+String(Table($pTable))+"Rec"+String($record)+":"+String($p)//- 10409
BLOB PROPERTIES(Field(Table($pTable);$p)->;$Compressed)
If ($Compressed#Is not compressed)
EXPAND BLOB(Field(Table($pTable);$p)->)
End if 
If (Test path name($Path+".txt")=Is a document)
DELETE DOCUMENT($Path+".txt")
End if 
BLOB TO DOCUMENT($Path+".txt";Field(Table($pTable);$p)->)
OB SET($oDuplicate;"Path";$Path+".txt")


: ($Type=Is picture)

$Path:=""
////$Path:="BlobTable"+String(Table($pTable->))+"Rec"+String($record)+":"+String($p) //fb10413
$Path:="BlobTable"+String(Table($pTable))+"Rec"+String($record)+":"+String($p)
If (Test path name($Path+".txt")=Is a document)
DELETE DOCUMENT($Path+".txt")
End if 
PICTURE TO BLOB(Field(Table($pTable);$p)->;$Blobpic;".png")
BLOB TO DOCUMENT($Path+".txt";$Blobpic)
OB SET($oDuplicate;"Path";$Path+".txt")

Else 
OB SET($oDuplicate;String($p);Field(Table($pTable);$p)->)
End case 

End if 
End for 
APPEND TO ARRAY($aoDuplicate;$oDuplicate)
NEXT RECORD($pTable->)
End while 

USE SET("DupSet")
SyncRecordLog ("Table: "+String(Table($pTable))+" Records: "+String(Records in selection($pTable->));"PrimaryKeyFix")
DELETE SELECTION($pTable->)

//then recreate records based on array object

For ($u;1;Size of array($aoDuplicate))
CREATE RECORD($pTable->)
$p:=0
For ($p;1;Get last field number($pTable))
If (Is field number valid($pTable;$p))
$Type:=Type(Field(Table($pTable);$p)->)

Case of 
: (Field name(Field(Table($pTable);$p))="PrimaryKey")
//Skip

: ($Type=Is integer) | ($Type=Is longint) | ($Type=Is real) | ($Type=Is float) | ($Type=Is integer 64 bits) | ($Type=Is Boolean)
Field(Table($pTable);$p)->:=OB Get($aoDuplicate{$u};String($p))

: ($Type=Is date)
Field(Table($pTable);$p)->:=Date(OB Get($aoDuplicate{$u};String($p)))

: ($Type=Is time)
Field(Table($pTable);$p)->:=Time(OB Get($aoDuplicate{$u};String($p)))

: ($Type=Is BLOB)
$Path:=""
$Path:=OB Get($aoDuplicate{$u};"Path")//-10409
DOCUMENT TO BLOB($Path;Field(Table($pTable);$p)->)
COMPRESS BLOB(Field(Table($pTable);$p)->;Fast compression mode)

If (Test path name($Path+".txt")=Is a document)
DELETE DOCUMENT($Path+".txt")
End if 

: ($Type=Is picture)

$Path:=""
$Path:=OB Get($aoDuplicate{$u};"Path")
DOCUMENT TO BLOB($Path;$Blobpic)
BLOB TO PICTURE($Blobpic;Field(Table($pTable);$p)->)

If (Test path name($Path+".txt")=Is a document)
DELETE DOCUMENT($Path+".txt")
End if 

Else 
Field(Table($pTable);$p)->:=OB Get($aoDuplicate{$u};String($p))
End case 

End if 
End for 

SAVE RECORD($pTable->)
End for 

//While (Records in selection($pTable->)>0)

//DUPLICATE RECORD($pTable->)
//$pPrimary->:=$NextAvail
//$NextAvail:=$NextAvail+1
//SAVE RECORD($pTable->)

//USE SET("DupSet")
//FIRST RECORD($pTable->)
//REMOVE FROM SET($pTable->;"DupSet")
//USE SET("DupSet")

//End while 
End if 
//<>aliPrimaryKeys{$i}:=$NextAvail
//USE SET("ToDelSet")
//DELETE SELECTION(Table($i)->)
End if 


CLEAR SET("ToDelSet")
CLEAR SET("DupSet")

READ ONLY(Table($i)->)

$TableNo:=0
End for 


End if 
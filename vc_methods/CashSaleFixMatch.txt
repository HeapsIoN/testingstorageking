//%attributes = {"lang":"en"} comment added and reserved by 4D.

C_LONGINT($CSale;$q;$counter;$counter2)

$CSale:=-30000
C_REAL($rect;$charge;$Balance)
C_DATE($trx_date)
C_TIME($trx_time)


SetFacility 
ALL RECORDS([Facility])

<>ProgressInd:=0
Progress ("Fixing...")

If (Records in selection([Facility])>0)

For ($q;1;Records in selection([Facility]))
QUERY([Trxs];[Trxs]CustomerCode=[Facility]FacilityCode+"MISCL";*)
QUERY([Trxs]; & ;[Trxs]Match>=(<>aiNextCashSaleNo{$q}-1))
If (Records in selection([Trxs])=0)
QUERY([Trxs];[Trxs]CustomerCode=[Facility]FacilityCode+"MISCL")
ORDER BY([Trxs];[Trxs]Match;<)
If (Records in selection([Trxs])>0)
<>aiNextCashSaleNo{$q}:=[Trxs]Match+1
Else 
<>aiNextCashSaleNo{$q}:=1
End if 
Else 
ORDER BY([Trxs];[Trxs]Match;<)
<>aiNextCashSaleNo{$q}:=[Trxs]Match+1
End if 
End for 

//////////////////<>aiNextCashSaleNo{$q-1}:=13334/////////test
//////////////////////
$q:=$q-1
/////SetFacility 
READ WRITE([Trxs])


QUERY([Trxs]; & ;[Trxs]Match=$CSale)
ORDER BY([Trxs];[Trxs]TrxDate;>;[Trxs]TrxTime;>;[Trxs]Charge;>)

If ((Records in selection([Trxs])>0))

ARRAY DATE($arDates;Records in selection([Trxs]))
ARRAY LONGINT($arTime;Records in selection([Trxs]))
ARRAY REAL($arTotAmt;Records in selection([Trxs]))
ARRAY LONGINT(arMatch;Records in selection([Trxs]))
ARRAY BOOLEAN($arCharge;Records in selection([Trxs]))
SELECTION TO ARRAY([Trxs]TrxDate;$arDates;[Trxs]TrxTime;$arTime;[Trxs]TotAmt;$arTotAmt;[Trxs]Match;arMatch;[Trxs]Charge;$arCharge)
$Balance:=0
$counter:=0
$flag:=0
counter2:=0
For ($arElem;1;Size of array(arMatch)-1)
//if(($arElem-1)<Size of array(arMatch))
//While (($arDates{$arElem}=$arDates{$arElem+1}) & ($arTime{$arElem}=$arTime{$arElem+1}) & ($flag=0))
While (($arDates{$arElem}=$arDates{$arElem+1}) & (($arTime{$arElem+1}-$arTime{$arElem})<=10) & ($flag=0))

If ($arCharge{$arElem}=False)
$Balance:=$Balance+$arTotAmt{$arElem}
$counter:=$counter+1
Else 
$Balance:=$Balance-$arTotAmt{$arElem}
$counter:=$counter+1
End if 
If ($arElem+2<Size of array(arMatch))
$arElem:=$arElem+1
Else 
$flag:=2

End if 
End while 
///////////////////////last rec for trx/////////
If ($arCharge{$arElem}=False)
$Balance:=$Balance+$arTotAmt{$arElem}
$counter:=$counter+1
Else 
$Balance:=$Balance-$arTotAmt{$arElem}
$counter:=$counter+1
End if 

If (Round($Balance;3)=0)
$kk:=$arElem+1-$counter
For ($RecNo;$kk;$arElem)
arMatch{$RecNo}:=<>aiNextCashSaleNo{$q}
End for 
<>aiNextCashSaleNo{$q}:=<>aiNextCashSaleNo{$q}+1
$counter2:=$counter2+$counter
End if 


$Balance:=0
$counter:=0
/////////////////////
//end if
End for 

$str1:=String($counter2)
$str2:=String(Records in selection([Trxs]))
//alertmessage($str1 + " records fixed from " + $str2 )

FIRST RECORD([Trxs])


For ($vlRecord;1;Records in selection([Trxs]))

[Trxs]Match:=arMatch{$vlRecord}

SAVE RECORD([Trxs])
NEXT RECORD([Trxs])
<>ProgressInd:=Trunc(($vlRecord/Size of array(arMatch))*100;0)

End for 
End if 
<>ProgressInd:=100

//AlertMessage ($str1+" records fixed from "+$str2)

READ ONLY([Trxs])
UNLOAD RECORD([Trxs])


End if 
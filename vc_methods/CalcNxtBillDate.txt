//%attributes = {"lang":"en"} comment added and reserved by 4D.
//This routine adjusts to retain DaytoBill rather than using Add to Date directly

C_DATE($0;$1;$Date)//NextBillDate, LastBillDate
C_LONGINT($2)//PeriodsAdv
C_LONGINT($3)//DaytoBill
C_TEXT($4)//[BillPlan]PlanPeriod, Day,Week,Month,Year

//C_LONGINT($Day;$Month;$Year)

Case of 
: ($4="Day")
$0:=$1+$2
: ($4="Week")
$0:=$1+($2*7)
: ($4="Year")
$0:=Add to date($1;$2;0;0)//Add years
Else //Month
$Date:=Add to date($1;0;$2;0)

If ($Date=!00-00-00!)
AlertMessage (Get localized string("Cannot calculate next bill date correctly"))
$Date:=Add to date(Current date;0;$2;0)
End if 

If (Day of($Date)#$3)
While (Day of($Date+1)<=$3) & (Day of($Date+1)#1)
$Date:=$Date+1
End while 
End if 
$0:=$Date

If (False)//Previous code here was not good for leap years
$Month:=Month of($1)+$2
$Year:=Year of($1)
While ($Month>12)
$Month:=$Month-12
$Year:=$Year+1
End while 
While ($Month<1)//This will handle a negative $2
$Month:=$Month+12
$Year:=$Year-1
End while 

$Testdate1:=Date("1/"+String($Month)+"/"+String($Year))

$NewMonth:=Month of($Testdate1)
If ($NewMonth>=1) & ($NewMonth<=12)

If ($NewMonth=2)
$TestDate:=Add to date(Date(String(<>aLastDay{$NewMonth})+"/"+String($NewMonth)+"/"+String(Year of($Testdate1)));0;0;1)
$LeapYear:=Month of($TestDate)
If ($NewMonth=$LeapYear)
$NewMonth:=<>aLastDay{$Month}+1
Else 
$NewMonth:=<>aLastDay{$Month}
End if 
Else 
$NewMonth:=<>aLastDay{$Month}
End if 


Else 
$NewMonth:=30
End if 

If ($3>$NewMonth)
$Day:=$NewMonth
Else 
$Day:=$3
End if 
$0:=GetDate ($Day;$Month;$Year)
End if 
End case 